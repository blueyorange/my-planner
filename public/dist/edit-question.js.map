{
  "version": 3,
  "sources": ["../../node_modules/marked/lib/marked.esm.js", "../../src/questionTemplate.js", "../../src/edit-question.js"],
  "sourcesContent": ["/**\n * marked - a markdown parser\n * Copyright (c) 2011-2022, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\nfunction getDefaults() {\n  return {\n    async: false,\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\n\nlet defaults = getDefaults();\n\nfunction changeDefaults(newDefaults) {\n  defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n\n/**\n * @param {string} html\n */\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nconst caret = /(^|[^\\[])\\^/g;\n\n/**\n * @param {string | RegExp} regex\n * @param {string} opt\n */\nfunction edit(regex, opt) {\n  regex = typeof regex === 'string' ? regex : regex.source;\n  opt = opt || '';\n  const obj = {\n    replace: (name, val) => {\n      val = val.source || val;\n      val = val.replace(caret, '$1');\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\n\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\n/**\n * @param {boolean} sanitize\n * @param {string} base\n * @param {string} href\n */\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    let prot;\n    try {\n      prot = decodeURIComponent(unescape(href))\n        .replace(nonWordAndColonTest, '')\n        .toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\n\nconst baseUrls = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n\n/**\n * @param {string} base\n * @param {string} href\n */\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n  const relativeBase = base.indexOf(':') === -1;\n\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\n\nconst noopTest = { exec: function noopTest() {} };\n\nfunction merge(obj) {\n  let i = 1,\n    target,\n    key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n      let escaped = false,\n        curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(/ \\|/);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) { cells.shift(); }\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) { cells.pop(); }\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param {string} str\n * @param {string} c\n * @param {boolean} invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  const l = str.length;\n  let level = 0,\n    i = 0;\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\nfunction checkSanitizeDeprecation(opt) {\n  if (opt && opt.sanitize && !opt.silent) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n}\n\n// copied from https://stackoverflow.com/a/5450113/806777\n/**\n * @param {string} pattern\n * @param {number} count\n */\nfunction repeatString(pattern, count) {\n  if (count < 1) {\n    return '';\n  }\n  let result = '';\n  while (count > 1) {\n    if (count & 1) {\n      result += pattern;\n    }\n    count >>= 1;\n    pattern += pattern;\n  }\n  return result + pattern;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n  const href = link.href;\n  const title = link.title ? escape(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    const token = {\n      type: 'link',\n      raw,\n      href,\n      title,\n      text,\n      tokens: lexer.inlineTokens(text)\n    };\n    lexer.state.inLink = false;\n    return token;\n  }\n  return {\n    type: 'image',\n    raw,\n    href,\n    title,\n    text: escape(text)\n  };\n}\n\nfunction indentCodeCompensation(raw, text) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(/^\\s+/);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nclass Tokenizer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0]\n      };\n    }\n  }\n\n  code(src) {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ {1,4}/gm, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim(text, '\\n')\n          : text\n      };\n    }\n  }\n\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '');\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, '$1') : cap[2],\n        text\n      };\n    }\n  }\n\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (/#$/.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: cap[0]\n      };\n    }\n  }\n\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n      const top = this.lexer.state.top;\n      this.lexer.state.top = true;\n      const tokens = this.lexer.blockTokens(text);\n      this.lexer.state.top = top;\n      return {\n        type: 'blockquote',\n        raw: cap[0],\n        tokens,\n        text\n      };\n    }\n  }\n\n  list(src) {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine,\n        line, nextLine, rawLine, itemContents, endEarly;\n\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n\n      const list = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: []\n      };\n\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        endEarly = false;\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n\n        line = cap[2].split('\\n', 1)[0];\n        nextLine = src.split('\\n', 1)[0];\n\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimLeft();\n        } else {\n          indent = cap[2].search(/[^ ]/); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        blankLine = false;\n\n        if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?: [^\\\\n]*)?(?:\\\\n|$))`);\n          const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n          const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n          const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            rawLine = src.split('\\n', 1)[0];\n            line = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              line = line.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n            }\n\n            // End list item if found code fences\n            if (fencesBeginRegex.test(line)) {\n              break;\n            }\n\n            // End list item if found start of new heading\n            if (headingBeginRegex.test(line)) {\n              break;\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(line)) {\n              break;\n            }\n\n            // Horizontal rule found\n            if (hrRegex.test(src)) {\n              break;\n            }\n\n            if (line.search(/[^ ]/) >= indent || !line.trim()) { // Dedent if possible\n              itemContents += '\\n' + line.slice(indent);\n            } else if (!blankLine) { // Until blank line, item doesn't need indentation\n              itemContents += '\\n' + line;\n            } else { // Otherwise, improper indentation ends this item\n              break;\n            }\n\n            if (!blankLine && !line.trim()) { // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents\n        });\n\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      list.items[list.items.length - 1].raw = raw.trimRight();\n      list.items[list.items.length - 1].text = itemContents.trimRight();\n      list.raw = list.raw.trimRight();\n\n      const l = list.items.length;\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (i = 0; i < l; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n\n        if (!list.loose) {\n          // Check if list should be loose\n          const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n\n          list.loose = hasMultipleLineBreaks;\n        }\n      }\n\n      // Set all items to loose if list is loose\n      if (list.loose) {\n        for (i = 0; i < l; i++) {\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token = {\n        type: 'html',\n        raw: cap[0],\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      };\n      if (this.options.sanitize) {\n        const text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n        token.type = 'paragraph';\n        token.text = text;\n        token.tokens = this.lexer.inline(text);\n      }\n      return token;\n    }\n  }\n\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline._escapes, '$1') : '';\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, '$1') : cap[3];\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href,\n        title\n      };\n    }\n  }\n\n  table(src) {\n    const cap = this.rules.block.table.exec(src);\n    if (cap) {\n      const item = {\n        type: 'table',\n        header: splitCells(cap[1]).map(c => { return { text: c }; }),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        item.raw = cap[0];\n\n        let l = item.align.length;\n        let i, j, k, row;\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        l = item.rows.length;\n        for (i = 0; i < l; i++) {\n          item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => { return { text: c }; });\n        }\n\n        // parse child tokens inside headers and cells\n\n        // header child tokens\n        l = item.header.length;\n        for (j = 0; j < l; j++) {\n          item.header[j].tokens = this.lexer.inline(item.header[j].text);\n        }\n\n        // cell child tokens\n        l = item.rows.length;\n        for (j = 0; j < l; j++) {\n          row = item.rows[j];\n          for (k = 0; k < row.length; k++) {\n            row[k].tokens = this.lexer.inline(row[k].text);\n          }\n        }\n\n        return item;\n      }\n    }\n  }\n\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1])\n      };\n    }\n  }\n\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n        ? cap[1].slice(0, -1)\n        : cap[1];\n      return {\n        type: 'paragraph',\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  text(src) {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0])\n      };\n    }\n  }\n\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: escape(cap[1])\n      };\n    }\n  }\n\n  tag(src) {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: this.options.sanitize\n          ? 'text'\n          : 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        text: this.options.sanitize\n          ? (this.options.sanitizer\n            ? this.options.sanitizer(cap[0])\n            : escape(cap[0]))\n          : cap[0]\n      };\n    }\n  }\n\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!(/>$/.test(trimmedUrl))) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n        title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n      }, cap[0], this.lexer);\n    }\n  }\n\n  reflink(src, links) {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n        || (cap = this.rules.inline.nolink.exec(src))) {\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = links[link.toLowerCase()];\n      if (!link) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  }\n\n  emStrong(src, maskedSrc, prevChar = '') {\n    let match = this.rules.inline.emStrong.lDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || (nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar)))) {\n      const lLength = match[0].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = rDelim.length;\n\n        if (match[3] || match[4]) { // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) { // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n\n        const raw = src.slice(0, lLength + match.index + (match[0].length - rDelim.length) + rLength);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = raw.slice(1, -1);\n          return {\n            type: 'em',\n            raw,\n            text,\n            tokens: this.lexer.inlineTokens(text)\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = raw.slice(2, -2);\n        return {\n          type: 'strong',\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text)\n        };\n      }\n    }\n  }\n\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, ' ');\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      text = escape(text, true);\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0]\n      };\n    }\n  }\n\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2])\n      };\n    }\n  }\n\n  autolink(src, mangle) {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  url(src, mangle) {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  inlineText(src, smartypants) {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      let text;\n      if (this.lexer.state.inRawBlock) {\n        text = this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0])) : cap[0];\n      } else {\n        text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n      }\n      return {\n        type: 'text',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n}\n\n/**\n * Block-Level Grammar\n */\nconst block = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*\\n)|~{3,})([^\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^((?:.|\\n(?!\\n))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */)\n  .replace('bull', block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('|table', '')\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n    + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n});\n\nblock.gfm.table = edit(block.gfm.table)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', ' {4}[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.gfm.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('table', block.gfm.table) // interrupt paragraphs with table\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = merge({}, block.normal, {\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest, // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(block.normal._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', block.lheading)\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .getRegex()\n});\n\n/**\n * Inline-Level Grammar\n */\nconst inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:([punct_])|[^\\s*]))|^_+(?:([punct*])|([^\\s_]))/,\n    //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //          () Skip orphan inside strong                                      () Consume to delim     (1) #***                (2) a***#, a***                             (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a\n    rDelimAst: /^(?:[^_*\\\\]|\\\\.)*?\\_\\_(?:[^_*\\\\]|\\\\.)*?\\*(?:[^_*\\\\]|\\\\.)*?(?=\\_\\_)|(?:[^*\\\\]|\\\\.)+(?=[^*])|[punct_](\\*+)(?=[\\s]|$)|(?:[^punct*_\\s\\\\]|\\\\.)(\\*+)(?=[punct_\\s]|$)|[punct_\\s](\\*+)(?=[^punct*_\\s])|[\\s](\\*+)(?=[punct_])|[punct_](\\*+)(?=[punct_])|(?:[^punct*_\\s\\\\]|\\\\.)(\\*+)(?=[^punct*_\\s])/,\n    rDelimUnd: /^(?:[^_*\\\\]|\\\\.)*?\\*\\*(?:[^_*\\\\]|\\\\.)*?\\_(?:[^_*\\\\]|\\\\.)*?(?=\\*\\*)|(?:[^_\\\\]|\\\\.)+(?=[^_])|[punct*](\\_+)(?=[\\s]|$)|(?:[^punct*_\\s\\\\]|\\\\.)(\\_+)(?=[punct*\\s]|$)|[punct*\\s](\\_+)(?=[^punct*_\\s])|[\\s](\\_+)(?=[punct*])|[punct*](\\_+)(?=[punct*])/ // ^- Not allowed for _\n  },\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^([\\spunctuation])/\n};\n\n// list of punctuation marks from CommonMark spec\n// without * and _ to handle the different emphasis markers * and _\ninline._punctuation = '!\"#$%&\\'()+\\\\-.,/:;<=>?@\\\\[\\\\]`^{|}~';\ninline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex();\n\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^\\]]*?\\]\\([^\\)]*?\\)|`[^`]*?`|<[^>]*?>/g;\n// lookbehind is not available on Safari as of version 16\n// inline.escapedEmSt = /(?<=(?:^|[^\\\\)(?:\\\\[^])*)\\\\[*_]/g;\ninline.escapedEmSt = /(?:^|[^\\\\])(?:\\\\\\\\)*\\\\[*_]/g;\n\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\n\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim)\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', inline._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.nolink = edit(inline.nolink)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g')\n  .replace('reflink', inline.reflink)\n  .replace('nolink', inline.nolink)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n});\n\ninline.gfm.url = edit(inline.gfm.url, 'i')\n  .replace('email', inline.gfm._extended_email)\n  .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex()\n});\n\n/**\n * smartypants text replacement\n * @param {string} text\n */\nfunction smartypants(text) {\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n}\n\n/**\n * mangle email addresses\n * @param {string} text\n */\nfunction mangle(text) {\n  let out = '',\n    i,\n    ch;\n\n  const l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n}\n\n/**\n * Block Lexer\n */\nclass Lexer {\n  constructor(options) {\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || defaults;\n    this.options.tokenizer = this.options.tokenizer || new Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src) {\n    src = src\n      .replace(/\\r\\n|\\r/g, '\\n');\n\n    this.blockTokens(src, this.tokens);\n\n    let next;\n    while (next = this.inlineQueue.shift()) {\n      this.inlineTokens(next.src, next.tokens);\n    }\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src, tokens = []) {\n    if (this.options.pedantic) {\n      src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n    } else {\n      src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n        return leading + '    '.repeat(tabs.length);\n      });\n    }\n\n    let token, lastToken, cutSrc, lastParagraphClipped;\n\n    while (src) {\n      if (this.options.extensions\n        && this.options.extensions.block\n        && this.options.extensions.block.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.length === 1 && tokens.length > 0) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unecessary paragraph tags\n          tokens[tokens.length - 1].raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n        if (lastParagraphClipped && lastToken.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = (cutSrc.length !== src.length);\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src, tokens = []) {\n    this.inlineQueue.push({ src, tokens });\n    return tokens;\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src, tokens = []) {\n    let token, lastToken, cutSrc;\n\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match;\n    let keepPrevChar, prevChar;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    // Mask out escaped em & strong delimiters\n    while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index + match[0].length - 2) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);\n      this.tokenizer.rules.inline.escapedEmSt.lastIndex--;\n    }\n\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      // extensions\n      if (this.options.extensions\n        && this.options.extensions.inline\n        && this.options.extensions.inline.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n}\n\n/**\n * Renderer\n */\nclass Renderer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  code(code, infostring, escaped) {\n    const lang = (infostring || '').match(/\\S*/)[0];\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n\n    code = code.replace(/\\n$/, '') + '\\n';\n\n    if (!lang) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"'\n      + this.options.langPrefix\n      + escape(lang)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n';\n  }\n\n  /**\n   * @param {string} quote\n   */\n  blockquote(quote) {\n    return `<blockquote>\\n${quote}</blockquote>\\n`;\n  }\n\n  html(html) {\n    return html;\n  }\n\n  /**\n   * @param {string} text\n   * @param {string} level\n   * @param {string} raw\n   * @param {any} slugger\n   */\n  heading(text, level, raw, slugger) {\n    if (this.options.headerIds) {\n      const id = this.options.headerPrefix + slugger.slug(raw);\n      return `<h${level} id=\"${id}\">${text}</h${level}>\\n`;\n    }\n\n    // ignore IDs\n    return `<h${level}>${text}</h${level}>\\n`;\n  }\n\n  hr() {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  }\n\n  list(body, ordered, start) {\n    const type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  /**\n   * @param {string} text\n   */\n  listitem(text) {\n    return `<li>${text}</li>\\n`;\n  }\n\n  checkbox(checked) {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\"'\n      + (this.options.xhtml ? ' /' : '')\n      + '> ';\n  }\n\n  /**\n   * @param {string} text\n   */\n  paragraph(text) {\n    return `<p>${text}</p>\\n`;\n  }\n\n  /**\n   * @param {string} header\n   * @param {string} body\n   */\n  table(header, body) {\n    if (body) body = `<tbody>${body}</tbody>`;\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n';\n  }\n\n  /**\n   * @param {string} content\n   */\n  tablerow(content) {\n    return `<tr>\\n${content}</tr>\\n`;\n  }\n\n  tablecell(content, flags) {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align\n      ? `<${type} align=\"${flags.align}\">`\n      : `<${type}>`;\n    return tag + content + `</${type}>\\n`;\n  }\n\n  /**\n   * span level renderer\n   * @param {string} text\n   */\n  strong(text) {\n    return `<strong>${text}</strong>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  em(text) {\n    return `<em>${text}</em>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  codespan(text) {\n    return `<code>${text}</code>`;\n  }\n\n  br() {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  }\n\n  /**\n   * @param {string} text\n   */\n  del(text) {\n    return `<del>${text}</del>`;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  link(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n    let out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  image(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${title}\"`;\n    }\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  }\n\n  text(text) {\n    return text;\n  }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass TextRenderer {\n  // no need for block level renderers\n  strong(text) {\n    return text;\n  }\n\n  em(text) {\n    return text;\n  }\n\n  codespan(text) {\n    return text;\n  }\n\n  del(text) {\n    return text;\n  }\n\n  html(text) {\n    return text;\n  }\n\n  text(text) {\n    return text;\n  }\n\n  link(href, title, text) {\n    return '' + text;\n  }\n\n  image(href, title, text) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n}\n\n/**\n * Slugger generates header id\n */\nclass Slugger {\n  constructor() {\n    this.seen = {};\n  }\n\n  /**\n   * @param {string} value\n   */\n  serialize(value) {\n    return value\n      .toLowerCase()\n      .trim()\n      // remove html tags\n      .replace(/<[!\\/a-z].*?>/ig, '')\n      // remove unwanted chars\n      .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '')\n      .replace(/\\s/g, '-');\n  }\n\n  /**\n   * Finds the next safe (unique) slug to use\n   * @param {string} originalSlug\n   * @param {boolean} isDryRun\n   */\n  getNextSafeSlug(originalSlug, isDryRun) {\n    let slug = originalSlug;\n    let occurenceAccumulator = 0;\n    if (this.seen.hasOwnProperty(slug)) {\n      occurenceAccumulator = this.seen[originalSlug];\n      do {\n        occurenceAccumulator++;\n        slug = originalSlug + '-' + occurenceAccumulator;\n      } while (this.seen.hasOwnProperty(slug));\n    }\n    if (!isDryRun) {\n      this.seen[originalSlug] = occurenceAccumulator;\n      this.seen[slug] = 0;\n    }\n    return slug;\n  }\n\n  /**\n   * Convert string to unique id\n   * @param {object} [options]\n   * @param {boolean} [options.dryrun] Generates the next unique slug without\n   * updating the internal accumulator.\n   */\n  slug(value, options = {}) {\n    const slug = this.serialize(value);\n    return this.getNextSafeSlug(slug, options.dryrun);\n  }\n}\n\n/**\n * Parsing & Compiling\n */\nclass Parser {\n  constructor(options) {\n    this.options = options || defaults;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new TextRenderer();\n    this.slugger = new Slugger();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens, top = true) {\n    let out = '',\n      i,\n      j,\n      k,\n      l2,\n      l3,\n      row,\n      cell,\n      header,\n      body,\n      token,\n      ordered,\n      start,\n      loose,\n      itemBody,\n      item,\n      checked,\n      task,\n      checkbox,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'space': {\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr();\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(\n            this.parseInline(token.tokens),\n            token.depth,\n            unescape(this.parseInline(token.tokens, this.textRenderer)),\n            this.slugger);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token.text,\n            token.lang,\n            token.escaped);\n          continue;\n        }\n        case 'table': {\n          header = '';\n\n          // header\n          cell = '';\n          l2 = token.header.length;\n          for (j = 0; j < l2; j++) {\n            cell += this.renderer.tablecell(\n              this.parseInline(token.header[j].tokens),\n              { header: true, align: token.align[j] }\n            );\n          }\n          header += this.renderer.tablerow(cell);\n\n          body = '';\n          l2 = token.rows.length;\n          for (j = 0; j < l2; j++) {\n            row = token.rows[j];\n\n            cell = '';\n            l3 = row.length;\n            for (k = 0; k < l3; k++) {\n              cell += this.renderer.tablecell(\n                this.parseInline(row[k].tokens),\n                { header: false, align: token.align[k] }\n              );\n            }\n\n            body += this.renderer.tablerow(cell);\n          }\n          out += this.renderer.table(header, body);\n          continue;\n        }\n        case 'blockquote': {\n          body = this.parse(token.tokens);\n          out += this.renderer.blockquote(body);\n          continue;\n        }\n        case 'list': {\n          ordered = token.ordered;\n          start = token.start;\n          loose = token.loose;\n          l2 = token.items.length;\n\n          body = '';\n          for (j = 0; j < l2; j++) {\n            item = token.items[j];\n            checked = item.checked;\n            task = item.task;\n\n            itemBody = '';\n            if (item.task) {\n              checkbox = this.renderer.checkbox(checked);\n              if (loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                  item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                    item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                  }\n                } else {\n                  item.tokens.unshift({\n                    type: 'text',\n                    text: checkbox\n                  });\n                }\n              } else {\n                itemBody += checkbox;\n              }\n            }\n\n            itemBody += this.parse(item.tokens, loose);\n            body += this.renderer.listitem(itemBody, task, checked);\n          }\n\n          out += this.renderer.list(body, ordered, start);\n          continue;\n        }\n        case 'html': {\n          // TODO parse inline content if parameter markdown=1\n          out += this.renderer.html(token.text);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(this.parseInline(token.tokens));\n          continue;\n        }\n        case 'text': {\n          body = token.tokens ? this.parseInline(token.tokens) : token.text;\n          while (i + 1 < l && tokens[i + 1].type === 'text') {\n            token = tokens[++i];\n            body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n          }\n          out += top ? this.renderer.paragraph(body) : body;\n          continue;\n        }\n\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens, renderer) {\n    renderer = renderer || this.renderer;\n    let out = '',\n      i,\n      token,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token.text);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token.text);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token.href, token.title, token.text);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'em': {\n          out += renderer.em(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token.text);\n          break;\n        }\n        case 'br': {\n          out += renderer.br();\n          break;\n        }\n        case 'del': {\n          out += renderer.del(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token.text);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n}\n\n/**\n * Marked\n */\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  if (typeof opt === 'function') {\n    callback = opt;\n    opt = null;\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  if (callback) {\n    const highlight = opt.highlight;\n    let tokens;\n\n    try {\n      tokens = Lexer.lex(src, opt);\n    } catch (e) {\n      return callback(e);\n    }\n\n    const done = function(err) {\n      let out;\n\n      if (!err) {\n        try {\n          if (opt.walkTokens) {\n            marked.walkTokens(tokens, opt.walkTokens);\n          }\n          out = Parser.parse(tokens, opt);\n        } catch (e) {\n          err = e;\n        }\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!tokens.length) return done();\n\n    let pending = 0;\n    marked.walkTokens(tokens, function(token) {\n      if (token.type === 'code') {\n        pending++;\n        setTimeout(() => {\n          highlight(token.text, token.lang, function(err, code) {\n            if (err) {\n              return done(err);\n            }\n            if (code != null && code !== token.text) {\n              token.text = code;\n              token.escaped = true;\n            }\n\n            pending--;\n            if (pending === 0) {\n              done();\n            }\n          });\n        }, 0);\n      }\n    });\n\n    if (pending === 0) {\n      done();\n    }\n\n    return;\n  }\n\n  function onError(e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n\n  try {\n    const tokens = Lexer.lex(src, opt);\n    if (opt.walkTokens) {\n      if (opt.async) {\n        return Promise.all(marked.walkTokens(tokens, opt.walkTokens))\n          .then(() => {\n            return Parser.parse(tokens, opt);\n          })\n          .catch(onError);\n      }\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n    return Parser.parse(tokens, opt);\n  } catch (e) {\n    onError(e);\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\nmarked.getDefaults = getDefaults;\n\nmarked.defaults = defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(...args) {\n  const extensions = marked.defaults.extensions || { renderers: {}, childTokens: {} };\n\n  args.forEach((pack) => {\n    // copy options to new object\n    const opts = merge({}, pack);\n\n    // set async to true if it was set to true before\n    opts.async = marked.defaults.async || opts.async;\n\n    // ==-- Parse \"addon\" extensions --== //\n    if (pack.extensions) {\n      pack.extensions.forEach((ext) => {\n        if (!ext.name) {\n          throw new Error('extension name required');\n        }\n        if (ext.renderer) { // Renderer extensions\n          const prevRenderer = extensions.renderers[ext.name];\n          if (prevRenderer) {\n            // Replace extension with func to run new extension but fall back if false\n            extensions.renderers[ext.name] = function(...args) {\n              let ret = ext.renderer.apply(this, args);\n              if (ret === false) {\n                ret = prevRenderer.apply(this, args);\n              }\n              return ret;\n            };\n          } else {\n            extensions.renderers[ext.name] = ext.renderer;\n          }\n        }\n        if (ext.tokenizer) { // Tokenizer Extensions\n          if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n            throw new Error(\"extension level must be 'block' or 'inline'\");\n          }\n          if (extensions[ext.level]) {\n            extensions[ext.level].unshift(ext.tokenizer);\n          } else {\n            extensions[ext.level] = [ext.tokenizer];\n          }\n          if (ext.start) { // Function to check for start of token\n            if (ext.level === 'block') {\n              if (extensions.startBlock) {\n                extensions.startBlock.push(ext.start);\n              } else {\n                extensions.startBlock = [ext.start];\n              }\n            } else if (ext.level === 'inline') {\n              if (extensions.startInline) {\n                extensions.startInline.push(ext.start);\n              } else {\n                extensions.startInline = [ext.start];\n              }\n            }\n          }\n        }\n        if (ext.childTokens) { // Child tokens to be visited by walkTokens\n          extensions.childTokens[ext.name] = ext.childTokens;\n        }\n      });\n      opts.extensions = extensions;\n    }\n\n    // ==-- Parse \"overwrite\" extensions --== //\n    if (pack.renderer) {\n      const renderer = marked.defaults.renderer || new Renderer();\n      for (const prop in pack.renderer) {\n        const prevRenderer = renderer[prop];\n        // Replace renderer with func to run extension, but fall back if false\n        renderer[prop] = (...args) => {\n          let ret = pack.renderer[prop].apply(renderer, args);\n          if (ret === false) {\n            ret = prevRenderer.apply(renderer, args);\n          }\n          return ret;\n        };\n      }\n      opts.renderer = renderer;\n    }\n    if (pack.tokenizer) {\n      const tokenizer = marked.defaults.tokenizer || new Tokenizer();\n      for (const prop in pack.tokenizer) {\n        const prevTokenizer = tokenizer[prop];\n        // Replace tokenizer with func to run extension, but fall back if false\n        tokenizer[prop] = (...args) => {\n          let ret = pack.tokenizer[prop].apply(tokenizer, args);\n          if (ret === false) {\n            ret = prevTokenizer.apply(tokenizer, args);\n          }\n          return ret;\n        };\n      }\n      opts.tokenizer = tokenizer;\n    }\n\n    // ==-- Parse WalkTokens extensions --== //\n    if (pack.walkTokens) {\n      const walkTokens = marked.defaults.walkTokens;\n      opts.walkTokens = function(token) {\n        let values = [];\n        values.push(pack.walkTokens.call(this, token));\n        if (walkTokens) {\n          values = values.concat(walkTokens.call(this, token));\n        }\n        return values;\n      };\n    }\n\n    marked.setOptions(opts);\n  });\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function(tokens, callback) {\n  let values = [];\n  for (const token of tokens) {\n    values = values.concat(callback.call(marked, token));\n    switch (token.type) {\n      case 'table': {\n        for (const cell of token.header) {\n          values = values.concat(marked.walkTokens(cell.tokens, callback));\n        }\n        for (const row of token.rows) {\n          for (const cell of row) {\n            values = values.concat(marked.walkTokens(cell.tokens, callback));\n          }\n        }\n        break;\n      }\n      case 'list': {\n        values = values.concat(marked.walkTokens(token.items, callback));\n        break;\n      }\n      default: {\n        if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) { // Walk any extensions\n          marked.defaults.extensions.childTokens[token.type].forEach(function(childTokens) {\n            values = values.concat(marked.walkTokens(token[childTokens], callback));\n          });\n        } else if (token.tokens) {\n          values = values.concat(marked.walkTokens(token.tokens, callback));\n        }\n      }\n    }\n  }\n  return values;\n};\n\n/**\n * Parse Inline\n * @param {string} src\n */\nmarked.parseInline = function(src, opt) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked.parseInline(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked.parseInline(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  try {\n    const tokens = Lexer.lexInline(src, opt);\n    if (opt.walkTokens) {\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n    return Parser.parseInline(tokens, opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n};\n\n/**\n * Expose\n */\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\nmarked.Tokenizer = Tokenizer;\nmarked.Slugger = Slugger;\nmarked.parse = marked;\n\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = Parser.parse;\nconst lexer = Lexer.lex;\n\nexport { Lexer, Parser, Renderer, Slugger, TextRenderer, Tokenizer, defaults, getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n", "import { marked } from \"marked\";\n\nfunction html(strings, ...values) {\n  let str = \"\";\n  strings.forEach((string, i) => {\n    str += string + values[i];\n  });\n  return str;\n}\n\nexport default function questionTemplateFunc(question, { disabled }) {\n  const { body, choices } = question;\n  const bodyHTML = marked.parse(body);\n  const choicesHTML = choices.map((c) => marked.parse(c));\n  return html`\n    <style>\n      .question {\n        max-width: 100%;\n      }\n      .question img {\n        width: 100%;\n        height: auto;\n      }\n      .question input[type=\"radio\"] {\n        min-width: 5em;\n        appearance: none;\n        margin: 0;\n      }\n      .question label {\n      }\n      .question label:hover {\n      }\n    </style>\n    ${bodyHTML}\n    ${choicesHTML\n      .map(\n        (choice, i) => html`\n          <div class=\"question\">\n            <label class=\"form-check-label\" for=\"choice-${i}\">\n              <input\n                name=\"answer\"\n                type=\"radio\"\n                name=\"answer\"\n                id=\"choice-${i}\"\n              />\n              ${choice}\n            </label>\n          </div>\n        `\n      )\n      .join(\"\")}\n  `;\n}\n", "import questionTemplateFunc from \"./questionTemplate.js\";\n\nconst previewNode = document.querySelector(\"#question-preview\");\n\nfunction renderPreviewFromForm(form) {\n  const formData = new FormData(form);\n  const body = formData.get(\"body\");\n  const choices = formData.getAll(\"choices\");\n  previewNode.innerHTML = questionTemplateFunc(\n    { body, choices },\n    { disabled: true }\n  );\n  renderMathInElement(previewNode, {\n    delimiters: [\n      {\n        left: \"$$\",\n        right: \"$$\",\n        display: true,\n      },\n      {\n        left: \"$\",\n        right: \"$\",\n        display: false,\n      },\n    ],\n  });\n}\n\nrenderPreviewFromForm(document.querySelector(\"form\"));\n\ndocument\n  .querySelector(\"form\")\n  .addEventListener(\"input\", (e) => renderPreviewFromForm(e.target.form));\n"],
  "mappings": "MAWA,SAASA,GAAc,CACrB,MAAO,CACL,MAAO,GACP,QAAS,KACT,OAAQ,GACR,WAAY,KACZ,IAAK,GACL,UAAW,GACX,aAAc,GACd,UAAW,KACX,WAAY,YACZ,OAAQ,GACR,SAAU,GACV,SAAU,KACV,SAAU,GACV,UAAW,KACX,OAAQ,GACR,YAAa,GACb,UAAW,KACX,WAAY,KACZ,MAAO,EACT,CACF,CAEA,IAAIC,EAAWD,EAAY,EAE3B,SAASE,GAAeC,EAAa,CACnCF,EAAWE,CACb,CAKA,IAAMC,EAAa,UACbC,GAAgB,IAAI,OAAOD,EAAW,OAAQ,GAAG,EACjDE,EAAqB,oDACrBC,GAAwB,IAAI,OAAOD,EAAmB,OAAQ,GAAG,EACjEE,GAAqB,CACzB,IAAK,QACL,IAAK,OACL,IAAK,OACL,IAAK,SACL,IAAK,OACP,EACMC,EAAwBC,GAAOF,GAAmBE,GACxD,SAASC,EAAOC,EAAMC,EAAQ,CAC5B,GAAIA,GACF,GAAIT,EAAW,KAAKQ,CAAI,EACtB,OAAOA,EAAK,QAAQP,GAAeI,CAAoB,UAGrDH,EAAmB,KAAKM,CAAI,EAC9B,OAAOA,EAAK,QAAQL,GAAuBE,CAAoB,EAInE,OAAOG,CACT,CAEA,IAAME,GAAe,6CAKrB,SAASC,EAASH,EAAM,CAEtB,OAAOA,EAAK,QAAQE,GAAc,CAACE,EAAG,KACpC,EAAI,EAAE,YAAY,EACd,IAAM,QAAgB,IACtB,EAAE,OAAO,CAAC,IAAM,IACX,EAAE,OAAO,CAAC,IAAM,IACnB,OAAO,aAAa,SAAS,EAAE,UAAU,CAAC,EAAG,EAAE,CAAC,EAChD,OAAO,aAAa,CAAC,EAAE,UAAU,CAAC,CAAC,EAElC,GACR,CACH,CAEA,IAAMC,GAAQ,eAMd,SAASC,EAAKC,EAAOC,EAAK,CACxBD,EAAQ,OAAOA,GAAU,SAAWA,EAAQA,EAAM,OAClDC,EAAMA,GAAO,GACb,IAAMC,EAAM,CACV,QAAS,CAACC,EAAMC,KACdA,EAAMA,EAAI,QAAUA,EACpBA,EAAMA,EAAI,QAAQN,GAAO,IAAI,EAC7BE,EAAQA,EAAM,QAAQG,EAAMC,CAAG,EACxBF,GAET,SAAU,IACD,IAAI,OAAOF,EAAOC,CAAG,CAEhC,EACA,OAAOC,CACT,CAEA,IAAMG,GAAsB,UACtBC,GAAuB,gCAO7B,SAASC,EAASC,EAAUC,EAAMC,EAAM,CACtC,GAAIF,EAAU,CACZ,IAAIG,EACJ,GAAI,CACFA,EAAO,mBAAmBf,EAASc,CAAI,CAAC,EACrC,QAAQL,GAAqB,EAAE,EAC/B,YAAY,CACjB,MAAE,CACA,OAAO,IACT,CACA,GAAIM,EAAK,QAAQ,aAAa,IAAM,GAAKA,EAAK,QAAQ,WAAW,IAAM,GAAKA,EAAK,QAAQ,OAAO,IAAM,EACpG,OAAO,IAEX,CACIF,GAAQ,CAACH,GAAqB,KAAKI,CAAI,IACzCA,EAAOE,GAAWH,EAAMC,CAAI,GAE9B,GAAI,CACFA,EAAO,UAAUA,CAAI,EAAE,QAAQ,OAAQ,GAAG,CAC5C,MAAE,CACA,OAAO,IACT,CACA,OAAOA,CACT,CAEA,IAAMG,EAAW,CAAC,EACZC,GAAa,mBACbC,GAAW,oBACXC,GAAS,4BAMf,SAASJ,GAAWH,EAAMC,EAAM,CACzBG,EAAS,IAAMJ,KAIdK,GAAW,KAAKL,CAAI,EACtBI,EAAS,IAAMJ,GAAQA,EAAO,IAE9BI,EAAS,IAAMJ,GAAQQ,EAAMR,EAAM,IAAK,EAAI,GAGhDA,EAAOI,EAAS,IAAMJ,GACtB,IAAMS,EAAeT,EAAK,QAAQ,GAAG,IAAM,GAE3C,OAAIC,EAAK,UAAU,EAAG,CAAC,IAAM,KACvBQ,EACKR,EAEFD,EAAK,QAAQM,GAAU,IAAI,EAAIL,EAC7BA,EAAK,OAAO,CAAC,IAAM,IACxBQ,EACKR,EAEFD,EAAK,QAAQO,GAAQ,IAAI,EAAIN,EAE7BD,EAAOC,CAElB,CAEA,IAAMS,EAAW,CAAE,KAAM,UAAoB,CAAC,CAAE,EAEhD,SAASC,EAAMlB,EAAK,CAClB,IAAImB,EAAI,EACNC,EACAC,EAEF,KAAOF,EAAI,UAAU,OAAQA,IAAK,CAChCC,EAAS,UAAUD,GACnB,IAAKE,KAAOD,EACN,OAAO,UAAU,eAAe,KAAKA,EAAQC,CAAG,IAClDrB,EAAIqB,GAAOD,EAAOC,GAGxB,CAEA,OAAOrB,CACT,CAEA,SAASsB,EAAWC,EAAUC,EAAO,CAGnC,IAAMC,EAAMF,EAAS,QAAQ,MAAO,CAACG,EAAOC,EAAQC,IAAQ,CACxD,IAAIC,EAAU,GACZC,EAAOH,EACT,KAAO,EAAEG,GAAQ,GAAKF,EAAIE,KAAU,MAAMD,EAAU,CAACA,EACrD,OAAIA,EAGK,IAGA,IAEX,CAAC,EACDE,EAAQN,EAAI,MAAM,KAAK,EACrB,EAAI,EAMR,GAHKM,EAAM,GAAG,KAAK,GAAKA,EAAM,MAAM,EAChCA,EAAM,OAAS,GAAK,CAACA,EAAMA,EAAM,OAAS,GAAG,KAAK,GAAKA,EAAM,IAAI,EAEjEA,EAAM,OAASP,EACjBO,EAAM,OAAOP,CAAK,MAElB,MAAOO,EAAM,OAASP,GAAOO,EAAM,KAAK,EAAE,EAG5C,KAAO,EAAIA,EAAM,OAAQ,IAEvBA,EAAM,GAAKA,EAAM,GAAG,KAAK,EAAE,QAAQ,QAAS,GAAG,EAEjD,OAAOA,CACT,CAUA,SAAShB,EAAMa,EAAKI,EAAGC,EAAQ,CAC7B,IAAMC,EAAIN,EAAI,OACd,GAAIM,IAAM,EACR,MAAO,GAIT,IAAIC,EAAU,EAGd,KAAOA,EAAUD,GAAG,CAClB,IAAME,EAAWR,EAAI,OAAOM,EAAIC,EAAU,CAAC,EAC3C,GAAIC,IAAaJ,GAAK,CAACC,EACrBE,YACSC,IAAaJ,GAAKC,EAC3BE,QAEA,MAEJ,CAEA,OAAOP,EAAI,MAAM,EAAGM,EAAIC,CAAO,CACjC,CAEA,SAASE,GAAmBT,EAAKU,EAAG,CAClC,GAAIV,EAAI,QAAQU,EAAE,EAAE,IAAM,GACxB,MAAO,GAET,IAAMJ,EAAIN,EAAI,OACVW,EAAQ,EACV,EAAI,EACN,KAAO,EAAIL,EAAG,IACZ,GAAIN,EAAI,KAAO,KACb,YACSA,EAAI,KAAOU,EAAE,GACtBC,YACSX,EAAI,KAAOU,EAAE,KACtBC,IACIA,EAAQ,GACV,OAAO,EAIb,MAAO,EACT,CAEA,SAASC,EAAyBzC,EAAK,CACjCA,GAAOA,EAAI,UAAY,CAACA,EAAI,QAC9B,QAAQ,KAAK,yMAAyM,CAE1N,CAOA,SAAS0C,EAAaC,EAASlB,EAAO,CACpC,GAAIA,EAAQ,EACV,MAAO,GAET,IAAImB,EAAS,GACb,KAAOnB,EAAQ,GACTA,EAAQ,IACVmB,GAAUD,GAEZlB,IAAU,EACVkB,GAAWA,EAEb,OAAOC,EAASD,CAClB,CAEA,SAASE,EAAWC,EAAKC,EAAMC,EAAKC,EAAO,CACzC,IAAMxC,EAAOsC,EAAK,KACZG,EAAQH,EAAK,MAAQxD,EAAOwD,EAAK,KAAK,EAAI,KAC1CI,EAAOL,EAAI,GAAG,QAAQ,cAAe,IAAI,EAE/C,GAAIA,EAAI,GAAG,OAAO,CAAC,IAAM,IAAK,CAC5BG,EAAM,MAAM,OAAS,GACrB,IAAMG,EAAQ,CACZ,KAAM,OACN,IAAAJ,EACA,KAAAvC,EACA,MAAAyC,EACA,KAAAC,EACA,OAAQF,EAAM,aAAaE,CAAI,CACjC,EACA,OAAAF,EAAM,MAAM,OAAS,GACdG,CACT,CACA,MAAO,CACL,KAAM,QACN,IAAAJ,EACA,KAAAvC,EACA,MAAAyC,EACA,KAAM3D,EAAO4D,CAAI,CACnB,CACF,CAEA,SAASE,GAAuBL,EAAKG,EAAM,CACzC,IAAMG,EAAoBN,EAAI,MAAM,eAAe,EAEnD,GAAIM,IAAsB,KACxB,OAAOH,EAGT,IAAMI,EAAeD,EAAkB,GAEvC,OAAOH,EACJ,MAAM;AAAA,CAAI,EACV,IAAIK,GAAQ,CACX,IAAMC,EAAoBD,EAAK,MAAM,MAAM,EAC3C,GAAIC,IAAsB,KACxB,OAAOD,EAGT,GAAM,CAACE,CAAY,EAAID,EAEvB,OAAIC,EAAa,QAAUH,EAAa,OAC/BC,EAAK,MAAMD,EAAa,MAAM,EAGhCC,CACT,CAAC,EACA,KAAK;AAAA,CAAI,CACd,CAKA,IAAMG,EAAN,KAAgB,CACd,YAAYC,EAAS,CACnB,KAAK,QAAUA,GAAW/E,CAC5B,CAEA,MAAMgF,EAAK,CACT,IAAMf,EAAM,KAAK,MAAM,MAAM,QAAQ,KAAKe,CAAG,EAC7C,GAAIf,GAAOA,EAAI,GAAG,OAAS,EACzB,MAAO,CACL,KAAM,QACN,IAAKA,EAAI,EACX,CAEJ,CAEA,KAAKe,EAAK,CACR,IAAMf,EAAM,KAAK,MAAM,MAAM,KAAK,KAAKe,CAAG,EAC1C,GAAIf,EAAK,CACP,IAAMK,EAAOL,EAAI,GAAG,QAAQ,YAAa,EAAE,EAC3C,MAAO,CACL,KAAM,OACN,IAAKA,EAAI,GACT,eAAgB,WAChB,KAAO,KAAK,QAAQ,SAEhBK,EADAnC,EAAMmC,EAAM;AAAA,CAAI,CAEtB,CACF,CACF,CAEA,OAAOU,EAAK,CACV,IAAMf,EAAM,KAAK,MAAM,MAAM,OAAO,KAAKe,CAAG,EAC5C,GAAIf,EAAK,CACP,IAAME,EAAMF,EAAI,GACVK,EAAOE,GAAuBL,EAAKF,EAAI,IAAM,EAAE,EAErD,MAAO,CACL,KAAM,OACN,IAAAE,EACA,KAAMF,EAAI,GAAKA,EAAI,GAAG,KAAK,EAAE,QAAQ,KAAK,MAAM,OAAO,SAAU,IAAI,EAAIA,EAAI,GAC7E,KAAAK,CACF,CACF,CACF,CAEA,QAAQU,EAAK,CACX,IAAMf,EAAM,KAAK,MAAM,MAAM,QAAQ,KAAKe,CAAG,EAC7C,GAAIf,EAAK,CACP,IAAIK,EAAOL,EAAI,GAAG,KAAK,EAGvB,GAAI,KAAK,KAAKK,CAAI,EAAG,CACnB,IAAMW,EAAU9C,EAAMmC,EAAM,GAAG,GAC3B,KAAK,QAAQ,UAEN,CAACW,GAAW,KAAK,KAAKA,CAAO,KAEtCX,EAAOW,EAAQ,KAAK,EAExB,CAEA,MAAO,CACL,KAAM,UACN,IAAKhB,EAAI,GACT,MAAOA,EAAI,GAAG,OACd,KAAAK,EACA,OAAQ,KAAK,MAAM,OAAOA,CAAI,CAChC,CACF,CACF,CAEA,GAAGU,EAAK,CACN,IAAMf,EAAM,KAAK,MAAM,MAAM,GAAG,KAAKe,CAAG,EACxC,GAAIf,EACF,MAAO,CACL,KAAM,KACN,IAAKA,EAAI,EACX,CAEJ,CAEA,WAAWe,EAAK,CACd,IAAMf,EAAM,KAAK,MAAM,MAAM,WAAW,KAAKe,CAAG,EAChD,GAAIf,EAAK,CACP,IAAMK,EAAOL,EAAI,GAAG,QAAQ,eAAgB,EAAE,EACxCiB,EAAM,KAAK,MAAM,MAAM,IAC7B,KAAK,MAAM,MAAM,IAAM,GACvB,IAAMC,EAAS,KAAK,MAAM,YAAYb,CAAI,EAC1C,YAAK,MAAM,MAAM,IAAMY,EAChB,CACL,KAAM,aACN,IAAKjB,EAAI,GACT,OAAAkB,EACA,KAAAb,CACF,CACF,CACF,CAEA,KAAKU,EAAK,CACR,IAAIf,EAAM,KAAK,MAAM,MAAM,KAAK,KAAKe,CAAG,EACxC,GAAIf,EAAK,CACP,IAAIE,EAAKiB,EAAQC,EAAWC,EAAQ/C,EAAGgD,EAAWC,EAChDC,EAAMC,EAAUC,EAASC,EAAcC,EAErCC,EAAO7B,EAAI,GAAG,KAAK,EACjB8B,EAAYD,EAAK,OAAS,EAE1BE,EAAO,CACX,KAAM,OACN,IAAK,GACL,QAASD,EACT,MAAOA,EAAY,CAACD,EAAK,MAAM,EAAG,EAAE,EAAI,GACxC,MAAO,GACP,MAAO,CAAC,CACV,EAEAA,EAAOC,EAAY,aAAaD,EAAK,MAAM,EAAE,IAAM,KAAKA,IAEpD,KAAK,QAAQ,WACfA,EAAOC,EAAYD,EAAO,SAI5B,IAAMG,EAAY,IAAI,OAAO,WAAWH,+BAAmC,EAG3E,KAAOd,IACLa,EAAW,GACP,IAAE5B,EAAMgC,EAAU,KAAKjB,CAAG,IAI1B,KAAK,MAAM,MAAM,GAAG,KAAKA,CAAG,KANtB,CAkCV,GAxBAb,EAAMF,EAAI,GACVe,EAAMA,EAAI,UAAUb,EAAI,MAAM,EAE9BsB,EAAOxB,EAAI,GAAG,MAAM;AAAA,EAAM,CAAC,EAAE,GAC7ByB,EAAWV,EAAI,MAAM;AAAA,EAAM,CAAC,EAAE,GAE1B,KAAK,QAAQ,UACfM,EAAS,EACTM,EAAeH,EAAK,SAAS,IAE7BH,EAASrB,EAAI,GAAG,OAAO,MAAM,EAC7BqB,EAASA,EAAS,EAAI,EAAIA,EAC1BM,EAAeH,EAAK,MAAMH,CAAM,EAChCA,GAAUrB,EAAI,GAAG,QAGnBsB,EAAY,GAER,CAACE,GAAQ,OAAO,KAAKC,CAAQ,IAC/BvB,GAAOuB,EAAW;AAAA,EAClBV,EAAMA,EAAI,UAAUU,EAAS,OAAS,CAAC,EACvCG,EAAW,IAGT,CAACA,EAAU,CACb,IAAMK,EAAkB,IAAI,OAAO,QAAQ,KAAK,IAAI,EAAGZ,EAAS,CAAC,kDAAkD,EAC7Ga,EAAU,IAAI,OAAO,QAAQ,KAAK,IAAI,EAAGb,EAAS,CAAC,qDAAqD,EACxGc,EAAmB,IAAI,OAAO,QAAQ,KAAK,IAAI,EAAGd,EAAS,CAAC,kBAAkB,EAC9Ee,EAAoB,IAAI,OAAO,QAAQ,KAAK,IAAI,EAAGf,EAAS,CAAC,KAAK,EAGxE,KAAON,IACLW,EAAUX,EAAI,MAAM;AAAA,EAAM,CAAC,EAAE,GAC7BS,EAAOE,EAGH,KAAK,QAAQ,WACfF,EAAOA,EAAK,QAAQ,0BAA2B,IAAI,GAIjD,EAAAW,EAAiB,KAAKX,CAAI,GAK1BY,EAAkB,KAAKZ,CAAI,GAK3BS,EAAgB,KAAKT,CAAI,GAKzBU,EAAQ,KAAKnB,CAAG,KAzBV,CA6BV,GAAIS,EAAK,OAAO,MAAM,GAAKH,GAAU,CAACG,EAAK,KAAK,EAC9CG,GAAgB;AAAA,EAAOH,EAAK,MAAMH,CAAM,UAC/B,CAACC,EACVK,GAAgB;AAAA,EAAOH,MAEvB,OAGE,CAACF,GAAa,CAACE,EAAK,KAAK,IAC3BF,EAAY,IAGdpB,GAAOwB,EAAU;AAAA,EACjBX,EAAMA,EAAI,UAAUW,EAAQ,OAAS,CAAC,CACxC,CACF,CAEKK,EAAK,QAEJR,EACFQ,EAAK,MAAQ,GACJ,YAAY,KAAK7B,CAAG,IAC7BqB,EAAoB,KAKpB,KAAK,QAAQ,MACfJ,EAAS,cAAc,KAAKQ,CAAY,EACpCR,IACFC,EAAYD,EAAO,KAAO,OAC1BQ,EAAeA,EAAa,QAAQ,eAAgB,EAAE,IAI1DI,EAAK,MAAM,KAAK,CACd,KAAM,YACN,IAAA7B,EACA,KAAM,CAAC,CAACiB,EACR,QAASC,EACT,MAAO,GACP,KAAMO,CACR,CAAC,EAEDI,EAAK,KAAO7B,CACd,CAGA6B,EAAK,MAAMA,EAAK,MAAM,OAAS,GAAG,IAAM7B,EAAI,UAAU,EACtD6B,EAAK,MAAMA,EAAK,MAAM,OAAS,GAAG,KAAOJ,EAAa,UAAU,EAChEI,EAAK,IAAMA,EAAK,IAAI,UAAU,EAE9B,IAAM1C,EAAI0C,EAAK,MAAM,OAGrB,IAAKzD,EAAI,EAAGA,EAAIe,EAAGf,IAIjB,GAHA,KAAK,MAAM,MAAM,IAAM,GACvByD,EAAK,MAAMzD,GAAG,OAAS,KAAK,MAAM,YAAYyD,EAAK,MAAMzD,GAAG,KAAM,CAAC,CAAC,EAEhE,CAACyD,EAAK,MAAO,CAEf,IAAMM,EAAUN,EAAK,MAAMzD,GAAG,OAAO,OAAOgE,GAAKA,EAAE,OAAS,OAAO,EAC7DC,EAAwBF,EAAQ,OAAS,GAAKA,EAAQ,KAAKC,GAAK,SAAS,KAAKA,EAAE,GAAG,CAAC,EAE1FP,EAAK,MAAQQ,CACf,CAIF,GAAIR,EAAK,MACP,IAAKzD,EAAI,EAAGA,EAAIe,EAAGf,IACjByD,EAAK,MAAMzD,GAAG,MAAQ,GAI1B,OAAOyD,CACT,CACF,CAEA,KAAKhB,EAAK,CACR,IAAMf,EAAM,KAAK,MAAM,MAAM,KAAK,KAAKe,CAAG,EAC1C,GAAIf,EAAK,CACP,IAAMM,EAAQ,CACZ,KAAM,OACN,IAAKN,EAAI,GACT,IAAK,CAAC,KAAK,QAAQ,YACbA,EAAI,KAAO,OAASA,EAAI,KAAO,UAAYA,EAAI,KAAO,SAC5D,KAAMA,EAAI,EACZ,EACA,GAAI,KAAK,QAAQ,SAAU,CACzB,IAAMK,EAAO,KAAK,QAAQ,UAAY,KAAK,QAAQ,UAAUL,EAAI,EAAE,EAAIvD,EAAOuD,EAAI,EAAE,EACpFM,EAAM,KAAO,YACbA,EAAM,KAAOD,EACbC,EAAM,OAAS,KAAK,MAAM,OAAOD,CAAI,CACvC,CACA,OAAOC,CACT,CACF,CAEA,IAAIS,EAAK,CACP,IAAMf,EAAM,KAAK,MAAM,MAAM,IAAI,KAAKe,CAAG,EACzC,GAAIf,EAAK,CACP,IAAMwC,EAAMxC,EAAI,GAAG,YAAY,EAAE,QAAQ,OAAQ,GAAG,EAC9CrC,EAAOqC,EAAI,GAAKA,EAAI,GAAG,QAAQ,WAAY,IAAI,EAAE,QAAQ,KAAK,MAAM,OAAO,SAAU,IAAI,EAAI,GAC7FI,EAAQJ,EAAI,GAAKA,EAAI,GAAG,UAAU,EAAGA,EAAI,GAAG,OAAS,CAAC,EAAE,QAAQ,KAAK,MAAM,OAAO,SAAU,IAAI,EAAIA,EAAI,GAC9G,MAAO,CACL,KAAM,MACN,IAAAwC,EACA,IAAKxC,EAAI,GACT,KAAArC,EACA,MAAAyC,CACF,CACF,CACF,CAEA,MAAMW,EAAK,CACT,IAAMf,EAAM,KAAK,MAAM,MAAM,MAAM,KAAKe,CAAG,EAC3C,GAAIf,EAAK,CACP,IAAMyC,EAAO,CACX,KAAM,QACN,OAAQhE,EAAWuB,EAAI,EAAE,EAAE,IAAIb,IAAc,CAAE,KAAMA,CAAE,EAAI,EAC3D,MAAOa,EAAI,GAAG,QAAQ,aAAc,EAAE,EAAE,MAAM,QAAQ,EACtD,KAAMA,EAAI,IAAMA,EAAI,GAAG,KAAK,EAAIA,EAAI,GAAG,QAAQ,YAAa,EAAE,EAAE,MAAM;AAAA,CAAI,EAAI,CAAC,CACjF,EAEA,GAAIyC,EAAK,OAAO,SAAWA,EAAK,MAAM,OAAQ,CAC5CA,EAAK,IAAMzC,EAAI,GAEf,IAAIX,EAAIoD,EAAK,MAAM,OACfnE,EAAGoE,EAAGC,EAAG/D,EACb,IAAKN,EAAI,EAAGA,EAAIe,EAAGf,IACb,YAAY,KAAKmE,EAAK,MAAMnE,EAAE,EAChCmE,EAAK,MAAMnE,GAAK,QACP,aAAa,KAAKmE,EAAK,MAAMnE,EAAE,EACxCmE,EAAK,MAAMnE,GAAK,SACP,YAAY,KAAKmE,EAAK,MAAMnE,EAAE,EACvCmE,EAAK,MAAMnE,GAAK,OAEhBmE,EAAK,MAAMnE,GAAK,KAKpB,IADAe,EAAIoD,EAAK,KAAK,OACTnE,EAAI,EAAGA,EAAIe,EAAGf,IACjBmE,EAAK,KAAKnE,GAAKG,EAAWgE,EAAK,KAAKnE,GAAImE,EAAK,OAAO,MAAM,EAAE,IAAItD,IAAc,CAAE,KAAMA,CAAE,EAAI,EAO9F,IADAE,EAAIoD,EAAK,OAAO,OACXC,EAAI,EAAGA,EAAIrD,EAAGqD,IACjBD,EAAK,OAAOC,GAAG,OAAS,KAAK,MAAM,OAAOD,EAAK,OAAOC,GAAG,IAAI,EAK/D,IADArD,EAAIoD,EAAK,KAAK,OACTC,EAAI,EAAGA,EAAIrD,EAAGqD,IAEjB,IADA9D,EAAM6D,EAAK,KAAKC,GACXC,EAAI,EAAGA,EAAI/D,EAAI,OAAQ+D,IAC1B/D,EAAI+D,GAAG,OAAS,KAAK,MAAM,OAAO/D,EAAI+D,GAAG,IAAI,EAIjD,OAAOF,CACT,CACF,CACF,CAEA,SAAS1B,EAAK,CACZ,IAAMf,EAAM,KAAK,MAAM,MAAM,SAAS,KAAKe,CAAG,EAC9C,GAAIf,EACF,MAAO,CACL,KAAM,UACN,IAAKA,EAAI,GACT,MAAOA,EAAI,GAAG,OAAO,CAAC,IAAM,IAAM,EAAI,EACtC,KAAMA,EAAI,GACV,OAAQ,KAAK,MAAM,OAAOA,EAAI,EAAE,CAClC,CAEJ,CAEA,UAAUe,EAAK,CACb,IAAMf,EAAM,KAAK,MAAM,MAAM,UAAU,KAAKe,CAAG,EAC/C,GAAIf,EAAK,CACP,IAAMK,EAAOL,EAAI,GAAG,OAAOA,EAAI,GAAG,OAAS,CAAC,IAAM;AAAA,EAC9CA,EAAI,GAAG,MAAM,EAAG,EAAE,EAClBA,EAAI,GACR,MAAO,CACL,KAAM,YACN,IAAKA,EAAI,GACT,KAAAK,EACA,OAAQ,KAAK,MAAM,OAAOA,CAAI,CAChC,CACF,CACF,CAEA,KAAKU,EAAK,CACR,IAAMf,EAAM,KAAK,MAAM,MAAM,KAAK,KAAKe,CAAG,EAC1C,GAAIf,EACF,MAAO,CACL,KAAM,OACN,IAAKA,EAAI,GACT,KAAMA,EAAI,GACV,OAAQ,KAAK,MAAM,OAAOA,EAAI,EAAE,CAClC,CAEJ,CAEA,OAAOe,EAAK,CACV,IAAMf,EAAM,KAAK,MAAM,OAAO,OAAO,KAAKe,CAAG,EAC7C,GAAIf,EACF,MAAO,CACL,KAAM,SACN,IAAKA,EAAI,GACT,KAAMvD,EAAOuD,EAAI,EAAE,CACrB,CAEJ,CAEA,IAAIe,EAAK,CACP,IAAMf,EAAM,KAAK,MAAM,OAAO,IAAI,KAAKe,CAAG,EAC1C,GAAIf,EACF,MAAI,CAAC,KAAK,MAAM,MAAM,QAAU,QAAQ,KAAKA,EAAI,EAAE,EACjD,KAAK,MAAM,MAAM,OAAS,GACjB,KAAK,MAAM,MAAM,QAAU,UAAU,KAAKA,EAAI,EAAE,IACzD,KAAK,MAAM,MAAM,OAAS,IAExB,CAAC,KAAK,MAAM,MAAM,YAAc,iCAAiC,KAAKA,EAAI,EAAE,EAC9E,KAAK,MAAM,MAAM,WAAa,GACrB,KAAK,MAAM,MAAM,YAAc,mCAAmC,KAAKA,EAAI,EAAE,IACtF,KAAK,MAAM,MAAM,WAAa,IAGzB,CACL,KAAM,KAAK,QAAQ,SACf,OACA,OACJ,IAAKA,EAAI,GACT,OAAQ,KAAK,MAAM,MAAM,OACzB,WAAY,KAAK,MAAM,MAAM,WAC7B,KAAM,KAAK,QAAQ,SACd,KAAK,QAAQ,UACZ,KAAK,QAAQ,UAAUA,EAAI,EAAE,EAC7BvD,EAAOuD,EAAI,EAAE,EACfA,EAAI,EACV,CAEJ,CAEA,KAAKe,EAAK,CACR,IAAMf,EAAM,KAAK,MAAM,OAAO,KAAK,KAAKe,CAAG,EAC3C,GAAIf,EAAK,CACP,IAAM4C,EAAa5C,EAAI,GAAG,KAAK,EAC/B,GAAI,CAAC,KAAK,QAAQ,UAAY,KAAK,KAAK4C,CAAU,EAAG,CAEnD,GAAI,CAAE,KAAK,KAAKA,CAAU,EACxB,OAIF,IAAMC,EAAa3E,EAAM0E,EAAW,MAAM,EAAG,EAAE,EAAG,IAAI,EACtD,IAAKA,EAAW,OAASC,EAAW,QAAU,IAAM,EAClD,MAEJ,KAAO,CAEL,IAAMC,EAAiBtD,GAAmBQ,EAAI,GAAI,IAAI,EACtD,GAAI8C,EAAiB,GAAI,CAEvB,IAAMC,GADQ/C,EAAI,GAAG,QAAQ,GAAG,IAAM,EAAI,EAAI,GACtBA,EAAI,GAAG,OAAS8C,EACxC9C,EAAI,GAAKA,EAAI,GAAG,UAAU,EAAG8C,CAAc,EAC3C9C,EAAI,GAAKA,EAAI,GAAG,UAAU,EAAG+C,CAAO,EAAE,KAAK,EAC3C/C,EAAI,GAAK,EACX,CACF,CACA,IAAIrC,EAAOqC,EAAI,GACXI,EAAQ,GACZ,GAAI,KAAK,QAAQ,SAAU,CAEzB,IAAMH,EAAO,gCAAgC,KAAKtC,CAAI,EAElDsC,IACFtC,EAAOsC,EAAK,GACZG,EAAQH,EAAK,GAEjB,MACEG,EAAQJ,EAAI,GAAKA,EAAI,GAAG,MAAM,EAAG,EAAE,EAAI,GAGzC,OAAArC,EAAOA,EAAK,KAAK,EACb,KAAK,KAAKA,CAAI,IACZ,KAAK,QAAQ,UAAY,CAAE,KAAK,KAAKiF,CAAU,EAEjDjF,EAAOA,EAAK,MAAM,CAAC,EAEnBA,EAAOA,EAAK,MAAM,EAAG,EAAE,GAGpBoC,EAAWC,EAAK,CACrB,KAAMrC,GAAOA,EAAK,QAAQ,KAAK,MAAM,OAAO,SAAU,IAAI,EAC1D,MAAOyC,GAAQA,EAAM,QAAQ,KAAK,MAAM,OAAO,SAAU,IAAI,CAC/D,EAAGJ,EAAI,GAAI,KAAK,KAAK,CACvB,CACF,CAEA,QAAQe,EAAKiC,EAAO,CAClB,IAAIhD,EACJ,IAAKA,EAAM,KAAK,MAAM,OAAO,QAAQ,KAAKe,CAAG,KACrCf,EAAM,KAAK,MAAM,OAAO,OAAO,KAAKe,CAAG,GAAI,CACjD,IAAId,GAAQD,EAAI,IAAMA,EAAI,IAAI,QAAQ,OAAQ,GAAG,EAEjD,GADAC,EAAO+C,EAAM/C,EAAK,YAAY,GAC1B,CAACA,EAAM,CACT,IAAMI,EAAOL,EAAI,GAAG,OAAO,CAAC,EAC5B,MAAO,CACL,KAAM,OACN,IAAKK,EACL,KAAAA,CACF,CACF,CACA,OAAON,EAAWC,EAAKC,EAAMD,EAAI,GAAI,KAAK,KAAK,CACjD,CACF,CAEA,SAASe,EAAKkC,EAAWC,EAAW,GAAI,CACtC,IAAIrE,EAAQ,KAAK,MAAM,OAAO,SAAS,OAAO,KAAKkC,CAAG,EAItD,GAHI,CAAClC,GAGDA,EAAM,IAAMqE,EAAS,MAAM,eAAe,EAAG,OAEjD,IAAMC,EAAWtE,EAAM,IAAMA,EAAM,IAAM,GAEzC,GAAI,CAACsE,GAAaA,IAAaD,IAAa,IAAM,KAAK,MAAM,OAAO,YAAY,KAAKA,CAAQ,GAAK,CAChG,IAAME,EAAUvE,EAAM,GAAG,OAAS,EAC9BwE,EAAQC,EAASC,EAAaH,EAASI,EAAgB,EAErDC,EAAS5E,EAAM,GAAG,KAAO,IAAM,KAAK,MAAM,OAAO,SAAS,UAAY,KAAK,MAAM,OAAO,SAAS,UAMvG,IALA4E,EAAO,UAAY,EAGnBR,EAAYA,EAAU,MAAM,GAAKlC,EAAI,OAASqC,CAAO,GAE7CvE,EAAQ4E,EAAO,KAAKR,CAAS,IAAM,MAAM,CAG/C,GAFAI,EAASxE,EAAM,IAAMA,EAAM,IAAMA,EAAM,IAAMA,EAAM,IAAMA,EAAM,IAAMA,EAAM,GAEvE,CAACwE,EAAQ,SAIb,GAFAC,EAAUD,EAAO,OAEbxE,EAAM,IAAMA,EAAM,GAAI,CACxB0E,GAAcD,EACd,QACF,UAAWzE,EAAM,IAAMA,EAAM,KACvBuE,EAAU,GAAK,GAAGA,EAAUE,GAAW,GAAI,CAC7CE,GAAiBF,EACjB,QACF,CAKF,GAFAC,GAAcD,EAEVC,EAAa,EAAG,SAGpBD,EAAU,KAAK,IAAIA,EAASA,EAAUC,EAAaC,CAAa,EAEhE,IAAMtD,EAAMa,EAAI,MAAM,EAAGqC,EAAUvE,EAAM,OAASA,EAAM,GAAG,OAASwE,EAAO,QAAUC,CAAO,EAG5F,GAAI,KAAK,IAAIF,EAASE,CAAO,EAAI,EAAG,CAClC,IAAMjD,EAAOH,EAAI,MAAM,EAAG,EAAE,EAC5B,MAAO,CACL,KAAM,KACN,IAAAA,EACA,KAAAG,EACA,OAAQ,KAAK,MAAM,aAAaA,CAAI,CACtC,CACF,CAGA,IAAMA,EAAOH,EAAI,MAAM,EAAG,EAAE,EAC5B,MAAO,CACL,KAAM,SACN,IAAAA,EACA,KAAAG,EACA,OAAQ,KAAK,MAAM,aAAaA,CAAI,CACtC,CACF,CACF,CACF,CAEA,SAASU,EAAK,CACZ,IAAMf,EAAM,KAAK,MAAM,OAAO,KAAK,KAAKe,CAAG,EAC3C,GAAIf,EAAK,CACP,IAAIK,EAAOL,EAAI,GAAG,QAAQ,MAAO,GAAG,EAC9B0D,EAAmB,OAAO,KAAKrD,CAAI,EACnCsD,EAA0B,KAAK,KAAKtD,CAAI,GAAK,KAAK,KAAKA,CAAI,EACjE,OAAIqD,GAAoBC,IACtBtD,EAAOA,EAAK,UAAU,EAAGA,EAAK,OAAS,CAAC,GAE1CA,EAAO5D,EAAO4D,EAAM,EAAI,EACjB,CACL,KAAM,WACN,IAAKL,EAAI,GACT,KAAAK,CACF,CACF,CACF,CAEA,GAAGU,EAAK,CACN,IAAMf,EAAM,KAAK,MAAM,OAAO,GAAG,KAAKe,CAAG,EACzC,GAAIf,EACF,MAAO,CACL,KAAM,KACN,IAAKA,EAAI,EACX,CAEJ,CAEA,IAAIe,EAAK,CACP,IAAMf,EAAM,KAAK,MAAM,OAAO,IAAI,KAAKe,CAAG,EAC1C,GAAIf,EACF,MAAO,CACL,KAAM,MACN,IAAKA,EAAI,GACT,KAAMA,EAAI,GACV,OAAQ,KAAK,MAAM,aAAaA,EAAI,EAAE,CACxC,CAEJ,CAEA,SAASe,EAAK6C,EAAQ,CACpB,IAAM5D,EAAM,KAAK,MAAM,OAAO,SAAS,KAAKe,CAAG,EAC/C,GAAIf,EAAK,CACP,IAAIK,EAAM1C,EACV,OAAIqC,EAAI,KAAO,KACbK,EAAO5D,EAAO,KAAK,QAAQ,OAASmH,EAAO5D,EAAI,EAAE,EAAIA,EAAI,EAAE,EAC3DrC,EAAO,UAAY0C,IAEnBA,EAAO5D,EAAOuD,EAAI,EAAE,EACpBrC,EAAO0C,GAGF,CACL,KAAM,OACN,IAAKL,EAAI,GACT,KAAAK,EACA,KAAA1C,EACA,OAAQ,CACN,CACE,KAAM,OACN,IAAK0C,EACL,KAAAA,CACF,CACF,CACF,CACF,CACF,CAEA,IAAIU,EAAK6C,EAAQ,CACf,IAAI5D,EACJ,GAAIA,EAAM,KAAK,MAAM,OAAO,IAAI,KAAKe,CAAG,EAAG,CACzC,IAAIV,EAAM1C,EACV,GAAIqC,EAAI,KAAO,IACbK,EAAO5D,EAAO,KAAK,QAAQ,OAASmH,EAAO5D,EAAI,EAAE,EAAIA,EAAI,EAAE,EAC3DrC,EAAO,UAAY0C,MACd,CAEL,IAAIwD,EACJ,GACEA,EAAc7D,EAAI,GAClBA,EAAI,GAAK,KAAK,MAAM,OAAO,WAAW,KAAKA,EAAI,EAAE,EAAE,SAC5C6D,IAAgB7D,EAAI,IAC7BK,EAAO5D,EAAOuD,EAAI,EAAE,EAChBA,EAAI,KAAO,OACbrC,EAAO,UAAYqC,EAAI,GAEvBrC,EAAOqC,EAAI,EAEf,CACA,MAAO,CACL,KAAM,OACN,IAAKA,EAAI,GACT,KAAAK,EACA,KAAA1C,EACA,OAAQ,CACN,CACE,KAAM,OACN,IAAK0C,EACL,KAAAA,CACF,CACF,CACF,CACF,CACF,CAEA,WAAWU,EAAK+C,EAAa,CAC3B,IAAM9D,EAAM,KAAK,MAAM,OAAO,KAAK,KAAKe,CAAG,EAC3C,GAAIf,EAAK,CACP,IAAIK,EACJ,OAAI,KAAK,MAAM,MAAM,WACnBA,EAAO,KAAK,QAAQ,SAAY,KAAK,QAAQ,UAAY,KAAK,QAAQ,UAAUL,EAAI,EAAE,EAAIvD,EAAOuD,EAAI,EAAE,EAAKA,EAAI,GAEhHK,EAAO5D,EAAO,KAAK,QAAQ,YAAcqH,EAAY9D,EAAI,EAAE,EAAIA,EAAI,EAAE,EAEhE,CACL,KAAM,OACN,IAAKA,EAAI,GACT,KAAAK,CACF,CACF,CACF,CACF,EAKM0D,EAAQ,CACZ,QAAS,mBACT,KAAM,uCACN,OAAQ,4FACR,GAAI,qEACJ,QAAS,uCACT,WAAY,0CACZ,KAAM,uCACN,KAAM,mdAUN,IAAK,kGACL,MAAO3F,EACP,SAAU,gDAGV,WAAY,uFACZ,KAAM,SACR,EAEA2F,EAAM,OAAS,8BACfA,EAAM,OAAS,+DACfA,EAAM,IAAM/G,EAAK+G,EAAM,GAAG,EACvB,QAAQ,QAASA,EAAM,MAAM,EAC7B,QAAQ,QAASA,EAAM,MAAM,EAC7B,SAAS,EAEZA,EAAM,OAAS,wBACfA,EAAM,cAAgB/G,EAAK,eAAe,EACvC,QAAQ,OAAQ+G,EAAM,MAAM,EAC5B,SAAS,EAEZA,EAAM,KAAO/G,EAAK+G,EAAM,IAAI,EACzB,QAAQ,QAASA,EAAM,MAAM,EAC7B,QAAQ,KAAM,iEAAiE,EAC/E,QAAQ,MAAO,UAAYA,EAAM,IAAI,OAAS,GAAG,EACjD,SAAS,EAEZA,EAAM,KAAO,gWAMbA,EAAM,SAAW,+BACjBA,EAAM,KAAO/G,EAAK+G,EAAM,KAAM,GAAG,EAC9B,QAAQ,UAAWA,EAAM,QAAQ,EACjC,QAAQ,MAAOA,EAAM,IAAI,EACzB,QAAQ,YAAa,0EAA0E,EAC/F,SAAS,EAEZA,EAAM,UAAY/G,EAAK+G,EAAM,UAAU,EACpC,QAAQ,KAAMA,EAAM,EAAE,EACtB,QAAQ,UAAW,eAAe,EAClC,QAAQ,YAAa,EAAE,EACvB,QAAQ,SAAU,EAAE,EACpB,QAAQ,aAAc,SAAS,EAC/B,QAAQ,SAAU,gDAAgD,EAClE,QAAQ,OAAQ,wBAAwB,EACxC,QAAQ,OAAQ,6DAA6D,EAC7E,QAAQ,MAAOA,EAAM,IAAI,EACzB,SAAS,EAEZA,EAAM,WAAa/G,EAAK+G,EAAM,UAAU,EACrC,QAAQ,YAAaA,EAAM,SAAS,EACpC,SAAS,EAMZA,EAAM,OAAS1F,EAAM,CAAC,EAAG0F,CAAK,EAM9BA,EAAM,IAAM1F,EAAM,CAAC,EAAG0F,EAAM,OAAQ,CAClC,MAAO,kKAGT,CAAC,EAEDA,EAAM,IAAI,MAAQ/G,EAAK+G,EAAM,IAAI,KAAK,EACnC,QAAQ,KAAMA,EAAM,EAAE,EACtB,QAAQ,UAAW,eAAe,EAClC,QAAQ,aAAc,SAAS,EAC/B,QAAQ,OAAQ,YAAY,EAC5B,QAAQ,SAAU,gDAAgD,EAClE,QAAQ,OAAQ,wBAAwB,EACxC,QAAQ,OAAQ,6DAA6D,EAC7E,QAAQ,MAAOA,EAAM,IAAI,EACzB,SAAS,EAEZA,EAAM,IAAI,UAAY/G,EAAK+G,EAAM,UAAU,EACxC,QAAQ,KAAMA,EAAM,EAAE,EACtB,QAAQ,UAAW,eAAe,EAClC,QAAQ,YAAa,EAAE,EACvB,QAAQ,QAASA,EAAM,IAAI,KAAK,EAChC,QAAQ,aAAc,SAAS,EAC/B,QAAQ,SAAU,gDAAgD,EAClE,QAAQ,OAAQ,wBAAwB,EACxC,QAAQ,OAAQ,6DAA6D,EAC7E,QAAQ,MAAOA,EAAM,IAAI,EACzB,SAAS,EAKZA,EAAM,SAAW1F,EAAM,CAAC,EAAG0F,EAAM,OAAQ,CACvC,KAAM/G,EACJ,wIAEwE,EACvE,QAAQ,UAAW+G,EAAM,QAAQ,EACjC,QAAQ,OAAQ,mKAGkB,EAClC,SAAS,EACZ,IAAK,oEACL,QAAS,yBACT,OAAQ3F,EACR,SAAU,mCACV,UAAWpB,EAAK+G,EAAM,OAAO,UAAU,EACpC,QAAQ,KAAMA,EAAM,EAAE,EACtB,QAAQ,UAAW;AAAA,EAAiB,EACpC,QAAQ,WAAYA,EAAM,QAAQ,EAClC,QAAQ,aAAc,SAAS,EAC/B,QAAQ,UAAW,EAAE,EACrB,QAAQ,QAAS,EAAE,EACnB,QAAQ,QAAS,EAAE,EACnB,SAAS,CACd,CAAC,EAKD,IAAMC,EAAS,CACb,OAAQ,8CACR,SAAU,sCACV,IAAK5F,EACL,IAAK,2JAML,KAAM,gDACN,QAAS,0BACT,OAAQ,wBACR,cAAe,wBACf,SAAU,CACR,OAAQ,2DAGR,UAAW,6RACX,UAAW,gPACb,EACA,KAAM,sCACN,GAAI,wBACJ,IAAKA,EACL,KAAM,8EACN,YAAa,oBACf,EAIA4F,EAAO,aAAe,uCACtBA,EAAO,YAAchH,EAAKgH,EAAO,WAAW,EAAE,QAAQ,eAAgBA,EAAO,YAAY,EAAE,SAAS,EAGpGA,EAAO,UAAY,4CAGnBA,EAAO,YAAc,8BAErBA,EAAO,SAAWhH,EAAK+G,EAAM,QAAQ,EAAE,QAAQ,YAAa,KAAK,EAAE,SAAS,EAE5EC,EAAO,SAAS,OAAShH,EAAKgH,EAAO,SAAS,MAAM,EACjD,QAAQ,SAAUA,EAAO,YAAY,EACrC,SAAS,EAEZA,EAAO,SAAS,UAAYhH,EAAKgH,EAAO,SAAS,UAAW,GAAG,EAC5D,QAAQ,SAAUA,EAAO,YAAY,EACrC,SAAS,EAEZA,EAAO,SAAS,UAAYhH,EAAKgH,EAAO,SAAS,UAAW,GAAG,EAC5D,QAAQ,SAAUA,EAAO,YAAY,EACrC,SAAS,EAEZA,EAAO,SAAW,8CAElBA,EAAO,QAAU,+BACjBA,EAAO,OAAS,+IAChBA,EAAO,SAAWhH,EAAKgH,EAAO,QAAQ,EACnC,QAAQ,SAAUA,EAAO,OAAO,EAChC,QAAQ,QAASA,EAAO,MAAM,EAC9B,SAAS,EAEZA,EAAO,WAAa,8EAEpBA,EAAO,IAAMhH,EAAKgH,EAAO,GAAG,EACzB,QAAQ,UAAWA,EAAO,QAAQ,EAClC,QAAQ,YAAaA,EAAO,UAAU,EACtC,SAAS,EAEZA,EAAO,OAAS,sDAChBA,EAAO,MAAQ,uCACfA,EAAO,OAAS,8DAEhBA,EAAO,KAAOhH,EAAKgH,EAAO,IAAI,EAC3B,QAAQ,QAASA,EAAO,MAAM,EAC9B,QAAQ,OAAQA,EAAO,KAAK,EAC5B,QAAQ,QAASA,EAAO,MAAM,EAC9B,SAAS,EAEZA,EAAO,QAAUhH,EAAKgH,EAAO,OAAO,EACjC,QAAQ,QAASA,EAAO,MAAM,EAC9B,QAAQ,MAAOD,EAAM,MAAM,EAC3B,SAAS,EAEZC,EAAO,OAAShH,EAAKgH,EAAO,MAAM,EAC/B,QAAQ,MAAOD,EAAM,MAAM,EAC3B,SAAS,EAEZC,EAAO,cAAgBhH,EAAKgH,EAAO,cAAe,GAAG,EAClD,QAAQ,UAAWA,EAAO,OAAO,EACjC,QAAQ,SAAUA,EAAO,MAAM,EAC/B,SAAS,EAMZA,EAAO,OAAS3F,EAAM,CAAC,EAAG2F,CAAM,EAMhCA,EAAO,SAAW3F,EAAM,CAAC,EAAG2F,EAAO,OAAQ,CACzC,OAAQ,CACN,MAAO,WACP,OAAQ,iEACR,OAAQ,cACR,OAAQ,UACV,EACA,GAAI,CACF,MAAO,QACP,OAAQ,6DACR,OAAQ,YACR,OAAQ,SACV,EACA,KAAMhH,EAAK,yBAAyB,EACjC,QAAQ,QAASgH,EAAO,MAAM,EAC9B,SAAS,EACZ,QAAShH,EAAK,+BAA+B,EAC1C,QAAQ,QAASgH,EAAO,MAAM,EAC9B,SAAS,CACd,CAAC,EAMDA,EAAO,IAAM3F,EAAM,CAAC,EAAG2F,EAAO,OAAQ,CACpC,OAAQhH,EAAKgH,EAAO,MAAM,EAAE,QAAQ,KAAM,MAAM,EAAE,SAAS,EAC3D,gBAAiB,4EACjB,IAAK,mEACL,WAAY,6EACZ,IAAK,+CACL,KAAM,4NACR,CAAC,EAEDA,EAAO,IAAI,IAAMhH,EAAKgH,EAAO,IAAI,IAAK,GAAG,EACtC,QAAQ,QAASA,EAAO,IAAI,eAAe,EAC3C,SAAS,EAKZA,EAAO,OAAS3F,EAAM,CAAC,EAAG2F,EAAO,IAAK,CACpC,GAAIhH,EAAKgH,EAAO,EAAE,EAAE,QAAQ,OAAQ,GAAG,EAAE,SAAS,EAClD,KAAMhH,EAAKgH,EAAO,IAAI,IAAI,EACvB,QAAQ,OAAQ,eAAe,EAC/B,QAAQ,UAAW,GAAG,EACtB,SAAS,CACd,CAAC,EAMD,SAASF,GAAYzD,EAAM,CACzB,OAAOA,EAEJ,QAAQ,OAAQ,QAAQ,EAExB,QAAQ,MAAO,QAAQ,EAEvB,QAAQ,0BAA2B,UAAU,EAE7C,QAAQ,KAAM,QAAQ,EAEtB,QAAQ,+BAAgC,UAAU,EAElD,QAAQ,KAAM,QAAQ,EAEtB,QAAQ,SAAU,QAAQ,CAC/B,CAMA,SAASuD,EAAOvD,EAAM,CACpB,IAAI4D,EAAM,GACR3F,EACA9B,EAEI6C,EAAIgB,EAAK,OACf,IAAK/B,EAAI,EAAGA,EAAIe,EAAGf,IACjB9B,EAAK6D,EAAK,WAAW/B,CAAC,EAClB,KAAK,OAAO,EAAI,KAClB9B,EAAK,IAAMA,EAAG,SAAS,EAAE,GAE3ByH,GAAO,KAAOzH,EAAK,IAGrB,OAAOyH,CACT,CAKA,IAAMC,EAAN,KAAY,CACV,YAAYpD,EAAS,CACnB,KAAK,OAAS,CAAC,EACf,KAAK,OAAO,MAAQ,OAAO,OAAO,IAAI,EACtC,KAAK,QAAUA,GAAW/E,EAC1B,KAAK,QAAQ,UAAY,KAAK,QAAQ,WAAa,IAAI8E,EACvD,KAAK,UAAY,KAAK,QAAQ,UAC9B,KAAK,UAAU,QAAU,KAAK,QAC9B,KAAK,UAAU,MAAQ,KACvB,KAAK,YAAc,CAAC,EACpB,KAAK,MAAQ,CACX,OAAQ,GACR,WAAY,GACZ,IAAK,EACP,EAEA,IAAMsD,EAAQ,CACZ,MAAOJ,EAAM,OACb,OAAQC,EAAO,MACjB,EAEI,KAAK,QAAQ,UACfG,EAAM,MAAQJ,EAAM,SACpBI,EAAM,OAASH,EAAO,UACb,KAAK,QAAQ,MACtBG,EAAM,MAAQJ,EAAM,IAChB,KAAK,QAAQ,OACfI,EAAM,OAASH,EAAO,OAEtBG,EAAM,OAASH,EAAO,KAG1B,KAAK,UAAU,MAAQG,CACzB,CAKA,WAAW,OAAQ,CACjB,MAAO,CACL,MAAAJ,EACA,OAAAC,CACF,CACF,CAKA,OAAO,IAAIjD,EAAKD,EAAS,CAEvB,OADc,IAAIoD,EAAMpD,CAAO,EAClB,IAAIC,CAAG,CACtB,CAKA,OAAO,UAAUA,EAAKD,EAAS,CAE7B,OADc,IAAIoD,EAAMpD,CAAO,EAClB,aAAaC,CAAG,CAC/B,CAKA,IAAIA,EAAK,CACPA,EAAMA,EACH,QAAQ,WAAY;AAAA,CAAI,EAE3B,KAAK,YAAYA,EAAK,KAAK,MAAM,EAEjC,IAAIqD,EACJ,KAAOA,EAAO,KAAK,YAAY,MAAM,GACnC,KAAK,aAAaA,EAAK,IAAKA,EAAK,MAAM,EAGzC,OAAO,KAAK,MACd,CAKA,YAAYrD,EAAKG,EAAS,CAAC,EAAG,CACxB,KAAK,QAAQ,SACfH,EAAMA,EAAI,QAAQ,MAAO,MAAM,EAAE,QAAQ,SAAU,EAAE,EAErDA,EAAMA,EAAI,QAAQ,eAAgB,CAACjE,EAAGuH,EAASC,IACtCD,EAAU,OAAO,OAAOC,EAAK,MAAM,CAC3C,EAGH,IAAIhE,EAAOiE,EAAWC,EAAQC,EAE9B,KAAO1D,GACL,GAAI,OAAK,QAAQ,YACZ,KAAK,QAAQ,WAAW,OACxB,KAAK,QAAQ,WAAW,MAAM,KAAM2D,IACjCpE,EAAQoE,EAAa,KAAK,CAAE,MAAO,IAAK,EAAG3D,EAAKG,CAAM,IACxDH,EAAMA,EAAI,UAAUT,EAAM,IAAI,MAAM,EACpCY,EAAO,KAAKZ,CAAK,EACV,IAEF,EACR,GAKH,IAAIA,EAAQ,KAAK,UAAU,MAAMS,CAAG,EAAG,CACrCA,EAAMA,EAAI,UAAUT,EAAM,IAAI,MAAM,EAChCA,EAAM,IAAI,SAAW,GAAKY,EAAO,OAAS,EAG5CA,EAAOA,EAAO,OAAS,GAAG,KAAO;AAAA,EAEjCA,EAAO,KAAKZ,CAAK,EAEnB,QACF,CAGA,GAAIA,EAAQ,KAAK,UAAU,KAAKS,CAAG,EAAG,CACpCA,EAAMA,EAAI,UAAUT,EAAM,IAAI,MAAM,EACpCiE,EAAYrD,EAAOA,EAAO,OAAS,GAE/BqD,IAAcA,EAAU,OAAS,aAAeA,EAAU,OAAS,SACrEA,EAAU,KAAO;AAAA,EAAOjE,EAAM,IAC9BiE,EAAU,MAAQ;AAAA,EAAOjE,EAAM,KAC/B,KAAK,YAAY,KAAK,YAAY,OAAS,GAAG,IAAMiE,EAAU,MAE9DrD,EAAO,KAAKZ,CAAK,EAEnB,QACF,CAGA,GAAIA,EAAQ,KAAK,UAAU,OAAOS,CAAG,EAAG,CACtCA,EAAMA,EAAI,UAAUT,EAAM,IAAI,MAAM,EACpCY,EAAO,KAAKZ,CAAK,EACjB,QACF,CAGA,GAAIA,EAAQ,KAAK,UAAU,QAAQS,CAAG,EAAG,CACvCA,EAAMA,EAAI,UAAUT,EAAM,IAAI,MAAM,EACpCY,EAAO,KAAKZ,CAAK,EACjB,QACF,CAGA,GAAIA,EAAQ,KAAK,UAAU,GAAGS,CAAG,EAAG,CAClCA,EAAMA,EAAI,UAAUT,EAAM,IAAI,MAAM,EACpCY,EAAO,KAAKZ,CAAK,EACjB,QACF,CAGA,GAAIA,EAAQ,KAAK,UAAU,WAAWS,CAAG,EAAG,CAC1CA,EAAMA,EAAI,UAAUT,EAAM,IAAI,MAAM,EACpCY,EAAO,KAAKZ,CAAK,EACjB,QACF,CAGA,GAAIA,EAAQ,KAAK,UAAU,KAAKS,CAAG,EAAG,CACpCA,EAAMA,EAAI,UAAUT,EAAM,IAAI,MAAM,EACpCY,EAAO,KAAKZ,CAAK,EACjB,QACF,CAGA,GAAIA,EAAQ,KAAK,UAAU,KAAKS,CAAG,EAAG,CACpCA,EAAMA,EAAI,UAAUT,EAAM,IAAI,MAAM,EACpCY,EAAO,KAAKZ,CAAK,EACjB,QACF,CAGA,GAAIA,EAAQ,KAAK,UAAU,IAAIS,CAAG,EAAG,CACnCA,EAAMA,EAAI,UAAUT,EAAM,IAAI,MAAM,EACpCiE,EAAYrD,EAAOA,EAAO,OAAS,GAC/BqD,IAAcA,EAAU,OAAS,aAAeA,EAAU,OAAS,SACrEA,EAAU,KAAO;AAAA,EAAOjE,EAAM,IAC9BiE,EAAU,MAAQ;AAAA,EAAOjE,EAAM,IAC/B,KAAK,YAAY,KAAK,YAAY,OAAS,GAAG,IAAMiE,EAAU,MACpD,KAAK,OAAO,MAAMjE,EAAM,OAClC,KAAK,OAAO,MAAMA,EAAM,KAAO,CAC7B,KAAMA,EAAM,KACZ,MAAOA,EAAM,KACf,GAEF,QACF,CAGA,GAAIA,EAAQ,KAAK,UAAU,MAAMS,CAAG,EAAG,CACrCA,EAAMA,EAAI,UAAUT,EAAM,IAAI,MAAM,EACpCY,EAAO,KAAKZ,CAAK,EACjB,QACF,CAGA,GAAIA,EAAQ,KAAK,UAAU,SAASS,CAAG,EAAG,CACxCA,EAAMA,EAAI,UAAUT,EAAM,IAAI,MAAM,EACpCY,EAAO,KAAKZ,CAAK,EACjB,QACF,CAKA,GADAkE,EAASzD,EACL,KAAK,QAAQ,YAAc,KAAK,QAAQ,WAAW,WAAY,CACjE,IAAI4D,EAAa,IACXC,EAAU7D,EAAI,MAAM,CAAC,EACvB8D,EACJ,KAAK,QAAQ,WAAW,WAAW,QAAQ,SAASC,EAAe,CACjED,EAAYC,EAAc,KAAK,CAAE,MAAO,IAAK,EAAGF,CAAO,EACnD,OAAOC,GAAc,UAAYA,GAAa,IAAKF,EAAa,KAAK,IAAIA,EAAYE,CAAS,EACpG,CAAC,EACGF,EAAa,KAAYA,GAAc,IACzCH,EAASzD,EAAI,UAAU,EAAG4D,EAAa,CAAC,EAE5C,CACA,GAAI,KAAK,MAAM,MAAQrE,EAAQ,KAAK,UAAU,UAAUkE,CAAM,GAAI,CAChED,EAAYrD,EAAOA,EAAO,OAAS,GAC/BuD,GAAwBF,EAAU,OAAS,aAC7CA,EAAU,KAAO;AAAA,EAAOjE,EAAM,IAC9BiE,EAAU,MAAQ;AAAA,EAAOjE,EAAM,KAC/B,KAAK,YAAY,IAAI,EACrB,KAAK,YAAY,KAAK,YAAY,OAAS,GAAG,IAAMiE,EAAU,MAE9DrD,EAAO,KAAKZ,CAAK,EAEnBmE,EAAwBD,EAAO,SAAWzD,EAAI,OAC9CA,EAAMA,EAAI,UAAUT,EAAM,IAAI,MAAM,EACpC,QACF,CAGA,GAAIA,EAAQ,KAAK,UAAU,KAAKS,CAAG,EAAG,CACpCA,EAAMA,EAAI,UAAUT,EAAM,IAAI,MAAM,EACpCiE,EAAYrD,EAAOA,EAAO,OAAS,GAC/BqD,GAAaA,EAAU,OAAS,QAClCA,EAAU,KAAO;AAAA,EAAOjE,EAAM,IAC9BiE,EAAU,MAAQ;AAAA,EAAOjE,EAAM,KAC/B,KAAK,YAAY,IAAI,EACrB,KAAK,YAAY,KAAK,YAAY,OAAS,GAAG,IAAMiE,EAAU,MAE9DrD,EAAO,KAAKZ,CAAK,EAEnB,QACF,CAEA,GAAIS,EAAK,CACP,IAAMgE,EAAS,0BAA4BhE,EAAI,WAAW,CAAC,EAC3D,GAAI,KAAK,QAAQ,OAAQ,CACvB,QAAQ,MAAMgE,CAAM,EACpB,KACF,KACE,OAAM,IAAI,MAAMA,CAAM,CAE1B,EAGF,YAAK,MAAM,IAAM,GACV7D,CACT,CAEA,OAAOH,EAAKG,EAAS,CAAC,EAAG,CACvB,YAAK,YAAY,KAAK,CAAE,IAAAH,EAAK,OAAAG,CAAO,CAAC,EAC9BA,CACT,CAKA,aAAaH,EAAKG,EAAS,CAAC,EAAG,CAC7B,IAAIZ,EAAOiE,EAAWC,EAGlBvB,EAAYlC,EACZlC,EACAmG,EAAc9B,EAGlB,GAAI,KAAK,OAAO,MAAO,CACrB,IAAMF,EAAQ,OAAO,KAAK,KAAK,OAAO,KAAK,EAC3C,GAAIA,EAAM,OAAS,EACjB,MAAQnE,EAAQ,KAAK,UAAU,MAAM,OAAO,cAAc,KAAKoE,CAAS,IAAM,MACxED,EAAM,SAASnE,EAAM,GAAG,MAAMA,EAAM,GAAG,YAAY,GAAG,EAAI,EAAG,EAAE,CAAC,IAClEoE,EAAYA,EAAU,MAAM,EAAGpE,EAAM,KAAK,EAAI,IAAMe,EAAa,IAAKf,EAAM,GAAG,OAAS,CAAC,EAAI,IAAMoE,EAAU,MAAM,KAAK,UAAU,MAAM,OAAO,cAAc,SAAS,EAI9K,CAEA,MAAQpE,EAAQ,KAAK,UAAU,MAAM,OAAO,UAAU,KAAKoE,CAAS,IAAM,MACxEA,EAAYA,EAAU,MAAM,EAAGpE,EAAM,KAAK,EAAI,IAAMe,EAAa,IAAKf,EAAM,GAAG,OAAS,CAAC,EAAI,IAAMoE,EAAU,MAAM,KAAK,UAAU,MAAM,OAAO,UAAU,SAAS,EAIpK,MAAQpE,EAAQ,KAAK,UAAU,MAAM,OAAO,YAAY,KAAKoE,CAAS,IAAM,MAC1EA,EAAYA,EAAU,MAAM,EAAGpE,EAAM,MAAQA,EAAM,GAAG,OAAS,CAAC,EAAI,KAAOoE,EAAU,MAAM,KAAK,UAAU,MAAM,OAAO,YAAY,SAAS,EAC5I,KAAK,UAAU,MAAM,OAAO,YAAY,YAG1C,KAAOlC,GAOL,GANKiE,IACH9B,EAAW,IAEb8B,EAAe,GAGX,OAAK,QAAQ,YACZ,KAAK,QAAQ,WAAW,QACxB,KAAK,QAAQ,WAAW,OAAO,KAAMN,IAClCpE,EAAQoE,EAAa,KAAK,CAAE,MAAO,IAAK,EAAG3D,EAAKG,CAAM,IACxDH,EAAMA,EAAI,UAAUT,EAAM,IAAI,MAAM,EACpCY,EAAO,KAAKZ,CAAK,EACV,IAEF,EACR,GAKH,IAAIA,EAAQ,KAAK,UAAU,OAAOS,CAAG,EAAG,CACtCA,EAAMA,EAAI,UAAUT,EAAM,IAAI,MAAM,EACpCY,EAAO,KAAKZ,CAAK,EACjB,QACF,CAGA,GAAIA,EAAQ,KAAK,UAAU,IAAIS,CAAG,EAAG,CACnCA,EAAMA,EAAI,UAAUT,EAAM,IAAI,MAAM,EACpCiE,EAAYrD,EAAOA,EAAO,OAAS,GAC/BqD,GAAajE,EAAM,OAAS,QAAUiE,EAAU,OAAS,QAC3DA,EAAU,KAAOjE,EAAM,IACvBiE,EAAU,MAAQjE,EAAM,MAExBY,EAAO,KAAKZ,CAAK,EAEnB,QACF,CAGA,GAAIA,EAAQ,KAAK,UAAU,KAAKS,CAAG,EAAG,CACpCA,EAAMA,EAAI,UAAUT,EAAM,IAAI,MAAM,EACpCY,EAAO,KAAKZ,CAAK,EACjB,QACF,CAGA,GAAIA,EAAQ,KAAK,UAAU,QAAQS,EAAK,KAAK,OAAO,KAAK,EAAG,CAC1DA,EAAMA,EAAI,UAAUT,EAAM,IAAI,MAAM,EACpCiE,EAAYrD,EAAOA,EAAO,OAAS,GAC/BqD,GAAajE,EAAM,OAAS,QAAUiE,EAAU,OAAS,QAC3DA,EAAU,KAAOjE,EAAM,IACvBiE,EAAU,MAAQjE,EAAM,MAExBY,EAAO,KAAKZ,CAAK,EAEnB,QACF,CAGA,GAAIA,EAAQ,KAAK,UAAU,SAASS,EAAKkC,EAAWC,CAAQ,EAAG,CAC7DnC,EAAMA,EAAI,UAAUT,EAAM,IAAI,MAAM,EACpCY,EAAO,KAAKZ,CAAK,EACjB,QACF,CAGA,GAAIA,EAAQ,KAAK,UAAU,SAASS,CAAG,EAAG,CACxCA,EAAMA,EAAI,UAAUT,EAAM,IAAI,MAAM,EACpCY,EAAO,KAAKZ,CAAK,EACjB,QACF,CAGA,GAAIA,EAAQ,KAAK,UAAU,GAAGS,CAAG,EAAG,CAClCA,EAAMA,EAAI,UAAUT,EAAM,IAAI,MAAM,EACpCY,EAAO,KAAKZ,CAAK,EACjB,QACF,CAGA,GAAIA,EAAQ,KAAK,UAAU,IAAIS,CAAG,EAAG,CACnCA,EAAMA,EAAI,UAAUT,EAAM,IAAI,MAAM,EACpCY,EAAO,KAAKZ,CAAK,EACjB,QACF,CAGA,GAAIA,EAAQ,KAAK,UAAU,SAASS,EAAK6C,CAAM,EAAG,CAChD7C,EAAMA,EAAI,UAAUT,EAAM,IAAI,MAAM,EACpCY,EAAO,KAAKZ,CAAK,EACjB,QACF,CAGA,GAAI,CAAC,KAAK,MAAM,SAAWA,EAAQ,KAAK,UAAU,IAAIS,EAAK6C,CAAM,GAAI,CACnE7C,EAAMA,EAAI,UAAUT,EAAM,IAAI,MAAM,EACpCY,EAAO,KAAKZ,CAAK,EACjB,QACF,CAKA,GADAkE,EAASzD,EACL,KAAK,QAAQ,YAAc,KAAK,QAAQ,WAAW,YAAa,CAClE,IAAI4D,EAAa,IACXC,EAAU7D,EAAI,MAAM,CAAC,EACvB8D,EACJ,KAAK,QAAQ,WAAW,YAAY,QAAQ,SAASC,EAAe,CAClED,EAAYC,EAAc,KAAK,CAAE,MAAO,IAAK,EAAGF,CAAO,EACnD,OAAOC,GAAc,UAAYA,GAAa,IAAKF,EAAa,KAAK,IAAIA,EAAYE,CAAS,EACpG,CAAC,EACGF,EAAa,KAAYA,GAAc,IACzCH,EAASzD,EAAI,UAAU,EAAG4D,EAAa,CAAC,EAE5C,CACA,GAAIrE,EAAQ,KAAK,UAAU,WAAWkE,EAAQV,EAAW,EAAG,CAC1D/C,EAAMA,EAAI,UAAUT,EAAM,IAAI,MAAM,EAChCA,EAAM,IAAI,MAAM,EAAE,IAAM,MAC1B4C,EAAW5C,EAAM,IAAI,MAAM,EAAE,GAE/B0E,EAAe,GACfT,EAAYrD,EAAOA,EAAO,OAAS,GAC/BqD,GAAaA,EAAU,OAAS,QAClCA,EAAU,KAAOjE,EAAM,IACvBiE,EAAU,MAAQjE,EAAM,MAExBY,EAAO,KAAKZ,CAAK,EAEnB,QACF,CAEA,GAAIS,EAAK,CACP,IAAMgE,EAAS,0BAA4BhE,EAAI,WAAW,CAAC,EAC3D,GAAI,KAAK,QAAQ,OAAQ,CACvB,QAAQ,MAAMgE,CAAM,EACpB,KACF,KACE,OAAM,IAAI,MAAMA,CAAM,CAE1B,EAGF,OAAO7D,CACT,CACF,EAKM+D,EAAN,KAAe,CACb,YAAYnE,EAAS,CACnB,KAAK,QAAUA,GAAW/E,CAC5B,CAEA,KAAKmJ,EAAMC,EAAYnG,EAAS,CAC9B,IAAMoG,GAAQD,GAAc,IAAI,MAAM,KAAK,EAAE,GAC7C,GAAI,KAAK,QAAQ,UAAW,CAC1B,IAAMlB,EAAM,KAAK,QAAQ,UAAUiB,EAAME,CAAI,EACzCnB,GAAO,MAAQA,IAAQiB,IACzBlG,EAAU,GACVkG,EAAOjB,EAEX,CAIA,OAFAiB,EAAOA,EAAK,QAAQ,MAAO,EAAE,EAAI;AAAA,EAE5BE,EAME,qBACH,KAAK,QAAQ,WACb3I,EAAO2I,CAAI,EACX,MACCpG,EAAUkG,EAAOzI,EAAOyI,EAAM,EAAI,GACnC;AAAA,EAVK,eACFlG,EAAUkG,EAAOzI,EAAOyI,EAAM,EAAI,GACnC;AAAA,CASR,CAKA,WAAWG,EAAO,CAChB,MAAO;AAAA,EAAiBA;AAAA,CAC1B,CAEA,KAAK3I,EAAM,CACT,OAAOA,CACT,CAQA,QAAQ2D,EAAMX,EAAOQ,EAAKoF,EAAS,CACjC,GAAI,KAAK,QAAQ,UAAW,CAC1B,IAAMC,EAAK,KAAK,QAAQ,aAAeD,EAAQ,KAAKpF,CAAG,EACvD,MAAO,KAAKR,SAAa6F,MAAOlF,OAAUX;AAAA,CAC5C,CAGA,MAAO,KAAKA,KAASW,OAAUX;AAAA,CACjC,CAEA,IAAK,CACH,OAAO,KAAK,QAAQ,MAAQ;AAAA,EAAY;AAAA,CAC1C,CAEA,KAAK8F,EAAMC,EAASC,EAAO,CACzB,IAAMC,EAAOF,EAAU,KAAO,KAC5BG,EAAYH,GAAWC,IAAU,EAAM,WAAaA,EAAQ,IAAO,GACrE,MAAO,IAAMC,EAAOC,EAAW;AAAA,EAAQJ,EAAO,KAAOG,EAAO;AAAA,CAC9D,CAKA,SAAStF,EAAM,CACb,MAAO,OAAOA;AAAA,CAChB,CAEA,SAASwF,EAAS,CAChB,MAAO,WACFA,EAAU,cAAgB,IAC3B,+BACC,KAAK,QAAQ,MAAQ,KAAO,IAC7B,IACN,CAKA,UAAUxF,EAAM,CACd,MAAO,MAAMA;AAAA,CACf,CAMA,MAAMyF,EAAQN,EAAM,CAClB,OAAIA,IAAMA,EAAO,UAAUA,aAEpB;AAAA;AAAA,EAEHM,EACA;AAAA,EACAN,EACA;AAAA,CACN,CAKA,SAASO,EAAS,CAChB,MAAO;AAAA,EAASA;AAAA,CAClB,CAEA,UAAUA,EAASC,EAAO,CACxB,IAAML,EAAOK,EAAM,OAAS,KAAO,KAInC,OAHYA,EAAM,MACd,IAAIL,YAAeK,EAAM,UACzB,IAAIL,MACKI,EAAU,KAAKJ;AAAA,CAC9B,CAMA,OAAOtF,EAAM,CACX,MAAO,WAAWA,YACpB,CAKA,GAAGA,EAAM,CACP,MAAO,OAAOA,QAChB,CAKA,SAASA,EAAM,CACb,MAAO,SAASA,UAClB,CAEA,IAAK,CACH,OAAO,KAAK,QAAQ,MAAQ,QAAU,MACxC,CAKA,IAAIA,EAAM,CACR,MAAO,QAAQA,SACjB,CAOA,KAAK1C,EAAMyC,EAAOC,EAAM,CAEtB,GADA1C,EAAOH,EAAS,KAAK,QAAQ,SAAU,KAAK,QAAQ,QAASG,CAAI,EAC7DA,IAAS,KACX,OAAO0C,EAET,IAAI4D,EAAM,YAActG,EAAO,IAC/B,OAAIyC,IACF6D,GAAO,WAAa7D,EAAQ,KAE9B6D,GAAO,IAAM5D,EAAO,OACb4D,CACT,CAOA,MAAMtG,EAAMyC,EAAOC,EAAM,CAEvB,GADA1C,EAAOH,EAAS,KAAK,QAAQ,SAAU,KAAK,QAAQ,QAASG,CAAI,EAC7DA,IAAS,KACX,OAAO0C,EAGT,IAAI4D,EAAM,aAAatG,WAAc0C,KACrC,OAAID,IACF6D,GAAO,WAAW7D,MAEpB6D,GAAO,KAAK,QAAQ,MAAQ,KAAO,IAC5BA,CACT,CAEA,KAAK5D,EAAM,CACT,OAAOA,CACT,CACF,EAMM4F,EAAN,KAAmB,CAEjB,OAAO5F,EAAM,CACX,OAAOA,CACT,CAEA,GAAGA,EAAM,CACP,OAAOA,CACT,CAEA,SAASA,EAAM,CACb,OAAOA,CACT,CAEA,IAAIA,EAAM,CACR,OAAOA,CACT,CAEA,KAAKA,EAAM,CACT,OAAOA,CACT,CAEA,KAAKA,EAAM,CACT,OAAOA,CACT,CAEA,KAAK1C,EAAMyC,EAAOC,EAAM,CACtB,MAAO,GAAKA,CACd,CAEA,MAAM1C,EAAMyC,EAAOC,EAAM,CACvB,MAAO,GAAKA,CACd,CAEA,IAAK,CACH,MAAO,EACT,CACF,EAKM6F,EAAN,KAAc,CACZ,aAAc,CACZ,KAAK,KAAO,CAAC,CACf,CAKA,UAAUC,EAAO,CACf,OAAOA,EACJ,YAAY,EACZ,KAAK,EAEL,QAAQ,kBAAmB,EAAE,EAE7B,QAAQ,gEAAiE,EAAE,EAC3E,QAAQ,MAAO,GAAG,CACvB,CAOA,gBAAgBC,EAAcC,EAAU,CACtC,IAAIC,EAAOF,EACPG,EAAuB,EAC3B,GAAI,KAAK,KAAK,eAAeD,CAAI,EAAG,CAClCC,EAAuB,KAAK,KAAKH,GACjC,GACEG,IACAD,EAAOF,EAAe,IAAMG,QACrB,KAAK,KAAK,eAAeD,CAAI,EACxC,CACA,OAAKD,IACH,KAAK,KAAKD,GAAgBG,EAC1B,KAAK,KAAKD,GAAQ,GAEbA,CACT,CAQA,KAAKH,EAAOrF,EAAU,CAAC,EAAG,CACxB,IAAMwF,EAAO,KAAK,UAAUH,CAAK,EACjC,OAAO,KAAK,gBAAgBG,EAAMxF,EAAQ,MAAM,CAClD,CACF,EAKM0F,EAAN,KAAa,CACX,YAAY1F,EAAS,CACnB,KAAK,QAAUA,GAAW/E,EAC1B,KAAK,QAAQ,SAAW,KAAK,QAAQ,UAAY,IAAIkJ,EACrD,KAAK,SAAW,KAAK,QAAQ,SAC7B,KAAK,SAAS,QAAU,KAAK,QAC7B,KAAK,aAAe,IAAIgB,EACxB,KAAK,QAAU,IAAIC,CACrB,CAKA,OAAO,MAAMhF,EAAQJ,EAAS,CAE5B,OADe,IAAI0F,EAAO1F,CAAO,EACnB,MAAMI,CAAM,CAC5B,CAKA,OAAO,YAAYA,EAAQJ,EAAS,CAElC,OADe,IAAI0F,EAAO1F,CAAO,EACnB,YAAYI,CAAM,CAClC,CAKA,MAAMA,EAAQD,EAAM,GAAM,CACxB,IAAIgD,EAAM,GACR,EACAvB,EACAC,EACA8D,EACAC,EACA9H,EACA+H,EACAb,EACAN,EACAlF,EACAmF,EACAC,EACAkB,EACAC,EACApE,EACAoD,EACAiB,EACAC,EACAC,EAEI3H,EAAI6B,EAAO,OACjB,IAAK,EAAI,EAAG,EAAI7B,EAAG,IAAK,CAItB,GAHAiB,EAAQY,EAAO,GAGX,KAAK,QAAQ,YAAc,KAAK,QAAQ,WAAW,WAAa,KAAK,QAAQ,WAAW,UAAUZ,EAAM,QAC1G0G,EAAM,KAAK,QAAQ,WAAW,UAAU1G,EAAM,MAAM,KAAK,CAAE,OAAQ,IAAK,EAAGA,CAAK,EAC5E0G,IAAQ,IAAS,CAAC,CAAC,QAAS,KAAM,UAAW,OAAQ,QAAS,aAAc,OAAQ,OAAQ,YAAa,MAAM,EAAE,SAAS1G,EAAM,IAAI,GAAG,CACzI2D,GAAO+C,GAAO,GACd,QACF,CAGF,OAAQ1G,EAAM,KAAM,CAClB,IAAK,QACH,SAEF,IAAK,KAAM,CACT2D,GAAO,KAAK,SAAS,GAAG,EACxB,QACF,CACA,IAAK,UAAW,CACdA,GAAO,KAAK,SAAS,QACnB,KAAK,YAAY3D,EAAM,MAAM,EAC7BA,EAAM,MACNzD,EAAS,KAAK,YAAYyD,EAAM,OAAQ,KAAK,YAAY,CAAC,EAC1D,KAAK,OAAO,EACd,QACF,CACA,IAAK,OAAQ,CACX2D,GAAO,KAAK,SAAS,KAAK3D,EAAM,KAC9BA,EAAM,KACNA,EAAM,OAAO,EACf,QACF,CACA,IAAK,QAAS,CAMZ,IALAwF,EAAS,GAGTa,EAAO,GACPF,EAAKnG,EAAM,OAAO,OACboC,EAAI,EAAGA,EAAI+D,EAAI/D,IAClBiE,GAAQ,KAAK,SAAS,UACpB,KAAK,YAAYrG,EAAM,OAAOoC,GAAG,MAAM,EACvC,CAAE,OAAQ,GAAM,MAAOpC,EAAM,MAAMoC,EAAG,CACxC,EAMF,IAJAoD,GAAU,KAAK,SAAS,SAASa,CAAI,EAErCnB,EAAO,GACPiB,EAAKnG,EAAM,KAAK,OACXoC,EAAI,EAAGA,EAAI+D,EAAI/D,IAAK,CAKvB,IAJA9D,EAAM0B,EAAM,KAAKoC,GAEjBiE,EAAO,GACPD,EAAK9H,EAAI,OACJ+D,EAAI,EAAGA,EAAI+D,EAAI/D,IAClBgE,GAAQ,KAAK,SAAS,UACpB,KAAK,YAAY/H,EAAI+D,GAAG,MAAM,EAC9B,CAAE,OAAQ,GAAO,MAAOrC,EAAM,MAAMqC,EAAG,CACzC,EAGF6C,GAAQ,KAAK,SAAS,SAASmB,CAAI,CACrC,CACA1C,GAAO,KAAK,SAAS,MAAM6B,EAAQN,CAAI,EACvC,QACF,CACA,IAAK,aAAc,CACjBA,EAAO,KAAK,MAAMlF,EAAM,MAAM,EAC9B2D,GAAO,KAAK,SAAS,WAAWuB,CAAI,EACpC,QACF,CACA,IAAK,OAAQ,CAOX,IANAC,EAAUnF,EAAM,QAChBoF,EAAQpF,EAAM,MACdsG,EAAQtG,EAAM,MACdmG,EAAKnG,EAAM,MAAM,OAEjBkF,EAAO,GACF9C,EAAI,EAAGA,EAAI+D,EAAI/D,IAClBD,EAAOnC,EAAM,MAAMoC,GACnBmD,EAAUpD,EAAK,QACfqE,EAAOrE,EAAK,KAEZoE,EAAW,GACPpE,EAAK,OACPsE,EAAW,KAAK,SAAS,SAASlB,CAAO,EACrCe,EACEnE,EAAK,OAAO,OAAS,GAAKA,EAAK,OAAO,GAAG,OAAS,aACpDA,EAAK,OAAO,GAAG,KAAOsE,EAAW,IAAMtE,EAAK,OAAO,GAAG,KAClDA,EAAK,OAAO,GAAG,QAAUA,EAAK,OAAO,GAAG,OAAO,OAAS,GAAKA,EAAK,OAAO,GAAG,OAAO,GAAG,OAAS,SACjGA,EAAK,OAAO,GAAG,OAAO,GAAG,KAAOsE,EAAW,IAAMtE,EAAK,OAAO,GAAG,OAAO,GAAG,OAG5EA,EAAK,OAAO,QAAQ,CAClB,KAAM,OACN,KAAMsE,CACR,CAAC,EAGHF,GAAYE,GAIhBF,GAAY,KAAK,MAAMpE,EAAK,OAAQmE,CAAK,EACzCpB,GAAQ,KAAK,SAAS,SAASqB,EAAUC,EAAMjB,CAAO,EAGxD5B,GAAO,KAAK,SAAS,KAAKuB,EAAMC,EAASC,CAAK,EAC9C,QACF,CACA,IAAK,OAAQ,CAEXzB,GAAO,KAAK,SAAS,KAAK3D,EAAM,IAAI,EACpC,QACF,CACA,IAAK,YAAa,CAChB2D,GAAO,KAAK,SAAS,UAAU,KAAK,YAAY3D,EAAM,MAAM,CAAC,EAC7D,QACF,CACA,IAAK,OAAQ,CAEX,IADAkF,EAAOlF,EAAM,OAAS,KAAK,YAAYA,EAAM,MAAM,EAAIA,EAAM,KACtD,EAAI,EAAIjB,GAAK6B,EAAO,EAAI,GAAG,OAAS,QACzCZ,EAAQY,EAAO,EAAE,GACjBsE,GAAQ;AAAA,GAAQlF,EAAM,OAAS,KAAK,YAAYA,EAAM,MAAM,EAAIA,EAAM,MAExE2D,GAAOhD,EAAM,KAAK,SAAS,UAAUuE,CAAI,EAAIA,EAC7C,QACF,CAEA,QAAS,CACP,IAAMT,EAAS,eAAiBzE,EAAM,KAAO,wBAC7C,GAAI,KAAK,QAAQ,OAAQ,CACvB,QAAQ,MAAMyE,CAAM,EACpB,MACF,KACE,OAAM,IAAI,MAAMA,CAAM,CAE1B,CACF,CACF,CAEA,OAAOd,CACT,CAKA,YAAY/C,EAAQ+F,EAAU,CAC5BA,EAAWA,GAAY,KAAK,SAC5B,IAAIhD,EAAM,GACR,EACA3D,EACA0G,EAEI3H,EAAI6B,EAAO,OACjB,IAAK,EAAI,EAAG,EAAI7B,EAAG,IAAK,CAItB,GAHAiB,EAAQY,EAAO,GAGX,KAAK,QAAQ,YAAc,KAAK,QAAQ,WAAW,WAAa,KAAK,QAAQ,WAAW,UAAUZ,EAAM,QAC1G0G,EAAM,KAAK,QAAQ,WAAW,UAAU1G,EAAM,MAAM,KAAK,CAAE,OAAQ,IAAK,EAAGA,CAAK,EAC5E0G,IAAQ,IAAS,CAAC,CAAC,SAAU,OAAQ,OAAQ,QAAS,SAAU,KAAM,WAAY,KAAM,MAAO,MAAM,EAAE,SAAS1G,EAAM,IAAI,GAAG,CAC/H2D,GAAO+C,GAAO,GACd,QACF,CAGF,OAAQ1G,EAAM,KAAM,CAClB,IAAK,SAAU,CACb2D,GAAOgD,EAAS,KAAK3G,EAAM,IAAI,EAC/B,KACF,CACA,IAAK,OAAQ,CACX2D,GAAOgD,EAAS,KAAK3G,EAAM,IAAI,EAC/B,KACF,CACA,IAAK,OAAQ,CACX2D,GAAOgD,EAAS,KAAK3G,EAAM,KAAMA,EAAM,MAAO,KAAK,YAAYA,EAAM,OAAQ2G,CAAQ,CAAC,EACtF,KACF,CACA,IAAK,QAAS,CACZhD,GAAOgD,EAAS,MAAM3G,EAAM,KAAMA,EAAM,MAAOA,EAAM,IAAI,EACzD,KACF,CACA,IAAK,SAAU,CACb2D,GAAOgD,EAAS,OAAO,KAAK,YAAY3G,EAAM,OAAQ2G,CAAQ,CAAC,EAC/D,KACF,CACA,IAAK,KAAM,CACThD,GAAOgD,EAAS,GAAG,KAAK,YAAY3G,EAAM,OAAQ2G,CAAQ,CAAC,EAC3D,KACF,CACA,IAAK,WAAY,CACfhD,GAAOgD,EAAS,SAAS3G,EAAM,IAAI,EACnC,KACF,CACA,IAAK,KAAM,CACT2D,GAAOgD,EAAS,GAAG,EACnB,KACF,CACA,IAAK,MAAO,CACVhD,GAAOgD,EAAS,IAAI,KAAK,YAAY3G,EAAM,OAAQ2G,CAAQ,CAAC,EAC5D,KACF,CACA,IAAK,OAAQ,CACXhD,GAAOgD,EAAS,KAAK3G,EAAM,IAAI,EAC/B,KACF,CACA,QAAS,CACP,IAAMyE,EAAS,eAAiBzE,EAAM,KAAO,wBAC7C,GAAI,KAAK,QAAQ,OAAQ,CACvB,QAAQ,MAAMyE,CAAM,EACpB,MACF,KACE,OAAM,IAAI,MAAMA,CAAM,CAE1B,CACF,CACF,CACA,OAAOd,CACT,CACF,EAKA,SAASiD,EAAOnG,EAAK7D,EAAKiK,EAAU,CAElC,GAAI,OAAOpG,EAAQ,KAAeA,IAAQ,KACxC,MAAM,IAAI,MAAM,gDAAgD,EAElE,GAAI,OAAOA,GAAQ,SACjB,MAAM,IAAI,MAAM,wCACZ,OAAO,UAAU,SAAS,KAAKA,CAAG,EAAI,mBAAmB,EAW/D,GARI,OAAO7D,GAAQ,aACjBiK,EAAWjK,EACXA,EAAM,MAGRA,EAAMmB,EAAM,CAAC,EAAG6I,EAAO,SAAUhK,GAAO,CAAC,CAAC,EAC1CyC,EAAyBzC,CAAG,EAExBiK,EAAU,CACZ,IAAMC,EAAYlK,EAAI,UAClBgE,EAEJ,GAAI,CACFA,EAASgD,EAAM,IAAInD,EAAK7D,CAAG,CAC7B,OAASmK,EAAP,CACA,OAAOF,EAASE,CAAC,CACnB,CAEA,IAAMC,EAAO,SAASC,EAAK,CACzB,IAAItD,EAEJ,GAAI,CAACsD,EACH,GAAI,CACErK,EAAI,YACNgK,EAAO,WAAWhG,EAAQhE,EAAI,UAAU,EAE1C+G,EAAMuC,EAAO,MAAMtF,EAAQhE,CAAG,CAChC,OAASmK,EAAP,CACAE,EAAMF,CACR,CAGF,OAAAnK,EAAI,UAAYkK,EAETG,EACHJ,EAASI,CAAG,EACZJ,EAAS,KAAMlD,CAAG,CACxB,EAQA,GANI,CAACmD,GAAaA,EAAU,OAAS,IAIrC,OAAOlK,EAAI,UAEP,CAACgE,EAAO,QAAQ,OAAOoG,EAAK,EAEhC,IAAIE,EAAU,EACdN,EAAO,WAAWhG,EAAQ,SAASZ,EAAO,CACpCA,EAAM,OAAS,SACjBkH,IACA,WAAW,IAAM,CACfJ,EAAU9G,EAAM,KAAMA,EAAM,KAAM,SAASiH,EAAKrC,EAAM,CACpD,GAAIqC,EACF,OAAOD,EAAKC,CAAG,EAEbrC,GAAQ,MAAQA,IAAS5E,EAAM,OACjCA,EAAM,KAAO4E,EACb5E,EAAM,QAAU,IAGlBkH,IACIA,IAAY,GACdF,EAAK,CAET,CAAC,CACH,EAAG,CAAC,EAER,CAAC,EAEGE,IAAY,GACdF,EAAK,EAGP,MACF,CAEA,SAASG,EAAQJ,EAAG,CAElB,GADAA,EAAE,SAAW;AAAA,2DACTnK,EAAI,OACN,MAAO,iCACHT,EAAO4K,EAAE,QAAU,GAAI,EAAI,EAC3B,SAEN,MAAMA,CACR,CAEA,GAAI,CACF,IAAMnG,EAASgD,EAAM,IAAInD,EAAK7D,CAAG,EACjC,GAAIA,EAAI,WAAY,CAClB,GAAIA,EAAI,MACN,OAAO,QAAQ,IAAIgK,EAAO,WAAWhG,EAAQhE,EAAI,UAAU,CAAC,EACzD,KAAK,IACGsJ,EAAO,MAAMtF,EAAQhE,CAAG,CAChC,EACA,MAAMuK,CAAO,EAElBP,EAAO,WAAWhG,EAAQhE,EAAI,UAAU,CAC1C,CACA,OAAOsJ,EAAO,MAAMtF,EAAQhE,CAAG,CACjC,OAASmK,EAAP,CACAI,EAAQJ,CAAC,CACX,CACF,CAMAH,EAAO,QACPA,EAAO,WAAa,SAAShK,EAAK,CAChC,OAAAmB,EAAM6I,EAAO,SAAUhK,CAAG,EAC1BlB,GAAekL,EAAO,QAAQ,EACvBA,CACT,EAEAA,EAAO,YAAcpL,EAErBoL,EAAO,SAAWnL,EAMlBmL,EAAO,IAAM,YAAYQ,EAAM,CAC7B,IAAMC,EAAaT,EAAO,SAAS,YAAc,CAAE,UAAW,CAAC,EAAG,YAAa,CAAC,CAAE,EAElFQ,EAAK,QAASE,GAAS,CAErB,IAAMC,EAAOxJ,EAAM,CAAC,EAAGuJ,CAAI,EA2D3B,GAxDAC,EAAK,MAAQX,EAAO,SAAS,OAASW,EAAK,MAGvCD,EAAK,aACPA,EAAK,WAAW,QAASE,GAAQ,CAC/B,GAAI,CAACA,EAAI,KACP,MAAM,IAAI,MAAM,yBAAyB,EAE3C,GAAIA,EAAI,SAAU,CAChB,IAAMC,EAAeJ,EAAW,UAAUG,EAAI,MAC1CC,EAEFJ,EAAW,UAAUG,EAAI,MAAQ,YAAYJ,EAAM,CACjD,IAAIV,EAAMc,EAAI,SAAS,MAAM,KAAMJ,CAAI,EACvC,OAAIV,IAAQ,KACVA,EAAMe,EAAa,MAAM,KAAML,CAAI,GAE9BV,CACT,EAEAW,EAAW,UAAUG,EAAI,MAAQA,EAAI,QAEzC,CACA,GAAIA,EAAI,UAAW,CACjB,GAAI,CAACA,EAAI,OAAUA,EAAI,QAAU,SAAWA,EAAI,QAAU,SACxD,MAAM,IAAI,MAAM,6CAA6C,EAE3DH,EAAWG,EAAI,OACjBH,EAAWG,EAAI,OAAO,QAAQA,EAAI,SAAS,EAE3CH,EAAWG,EAAI,OAAS,CAACA,EAAI,SAAS,EAEpCA,EAAI,QACFA,EAAI,QAAU,QACZH,EAAW,WACbA,EAAW,WAAW,KAAKG,EAAI,KAAK,EAEpCH,EAAW,WAAa,CAACG,EAAI,KAAK,EAE3BA,EAAI,QAAU,WACnBH,EAAW,YACbA,EAAW,YAAY,KAAKG,EAAI,KAAK,EAErCH,EAAW,YAAc,CAACG,EAAI,KAAK,GAI3C,CACIA,EAAI,cACNH,EAAW,YAAYG,EAAI,MAAQA,EAAI,YAE3C,CAAC,EACDD,EAAK,WAAaF,GAIhBC,EAAK,SAAU,CACjB,IAAMX,EAAWC,EAAO,SAAS,UAAY,IAAIjC,EACjD,QAAW+C,KAAQJ,EAAK,SAAU,CAChC,IAAMG,EAAed,EAASe,GAE9Bf,EAASe,GAAQ,IAAIN,IAAS,CAC5B,IAAIV,EAAMY,EAAK,SAASI,GAAM,MAAMf,EAAUS,CAAI,EAClD,OAAIV,IAAQ,KACVA,EAAMe,EAAa,MAAMd,EAAUS,CAAI,GAElCV,CACT,CACF,CACAa,EAAK,SAAWZ,CAClB,CACA,GAAIW,EAAK,UAAW,CAClB,IAAMK,EAAYf,EAAO,SAAS,WAAa,IAAIrG,EACnD,QAAWmH,KAAQJ,EAAK,UAAW,CACjC,IAAMM,EAAgBD,EAAUD,GAEhCC,EAAUD,GAAQ,IAAIN,IAAS,CAC7B,IAAIV,EAAMY,EAAK,UAAUI,GAAM,MAAMC,EAAWP,CAAI,EACpD,OAAIV,IAAQ,KACVA,EAAMkB,EAAc,MAAMD,EAAWP,CAAI,GAEpCV,CACT,CACF,CACAa,EAAK,UAAYI,CACnB,CAGA,GAAIL,EAAK,WAAY,CACnB,IAAMO,EAAajB,EAAO,SAAS,WACnCW,EAAK,WAAa,SAASvH,EAAO,CAChC,IAAI8H,EAAS,CAAC,EACd,OAAAA,EAAO,KAAKR,EAAK,WAAW,KAAK,KAAMtH,CAAK,CAAC,EACzC6H,IACFC,EAASA,EAAO,OAAOD,EAAW,KAAK,KAAM7H,CAAK,CAAC,GAE9C8H,CACT,CACF,CAEAlB,EAAO,WAAWW,CAAI,CACxB,CAAC,CACH,EAMAX,EAAO,WAAa,SAAShG,EAAQiG,EAAU,CAC7C,IAAIiB,EAAS,CAAC,EACd,QAAW9H,KAASY,EAElB,OADAkH,EAASA,EAAO,OAAOjB,EAAS,KAAKD,EAAQ5G,CAAK,CAAC,EAC3CA,EAAM,KAAM,CAClB,IAAK,QAAS,CACZ,QAAWqG,KAAQrG,EAAM,OACvB8H,EAASA,EAAO,OAAOlB,EAAO,WAAWP,EAAK,OAAQQ,CAAQ,CAAC,EAEjE,QAAWvI,KAAO0B,EAAM,KACtB,QAAWqG,KAAQ/H,EACjBwJ,EAASA,EAAO,OAAOlB,EAAO,WAAWP,EAAK,OAAQQ,CAAQ,CAAC,EAGnE,KACF,CACA,IAAK,OAAQ,CACXiB,EAASA,EAAO,OAAOlB,EAAO,WAAW5G,EAAM,MAAO6G,CAAQ,CAAC,EAC/D,KACF,CACA,QACMD,EAAO,SAAS,YAAcA,EAAO,SAAS,WAAW,aAAeA,EAAO,SAAS,WAAW,YAAY5G,EAAM,MACvH4G,EAAO,SAAS,WAAW,YAAY5G,EAAM,MAAM,QAAQ,SAAS+H,EAAa,CAC/ED,EAASA,EAAO,OAAOlB,EAAO,WAAW5G,EAAM+H,GAAclB,CAAQ,CAAC,CACxE,CAAC,EACQ7G,EAAM,SACf8H,EAASA,EAAO,OAAOlB,EAAO,WAAW5G,EAAM,OAAQ6G,CAAQ,CAAC,EAGtE,CAEF,OAAOiB,CACT,EAMAlB,EAAO,YAAc,SAASnG,EAAK7D,EAAK,CAEtC,GAAI,OAAO6D,EAAQ,KAAeA,IAAQ,KACxC,MAAM,IAAI,MAAM,4DAA4D,EAE9E,GAAI,OAAOA,GAAQ,SACjB,MAAM,IAAI,MAAM,oDACZ,OAAO,UAAU,SAAS,KAAKA,CAAG,EAAI,mBAAmB,EAG/D7D,EAAMmB,EAAM,CAAC,EAAG6I,EAAO,SAAUhK,GAAO,CAAC,CAAC,EAC1CyC,EAAyBzC,CAAG,EAE5B,GAAI,CACF,IAAMgE,EAASgD,EAAM,UAAUnD,EAAK7D,CAAG,EACvC,OAAIA,EAAI,YACNgK,EAAO,WAAWhG,EAAQhE,EAAI,UAAU,EAEnCsJ,EAAO,YAAYtF,EAAQhE,CAAG,CACvC,OAASmK,EAAP,CAEA,GADAA,EAAE,SAAW;AAAA,2DACTnK,EAAI,OACN,MAAO,iCACHT,EAAO4K,EAAE,QAAU,GAAI,EAAI,EAC3B,SAEN,MAAMA,CACR,CACF,EAKAH,EAAO,OAASV,EAChBU,EAAO,OAASV,EAAO,MACvBU,EAAO,SAAWjC,EAClBiC,EAAO,aAAejB,EACtBiB,EAAO,MAAQhD,EACfgD,EAAO,MAAQhD,EAAM,IACrBgD,EAAO,UAAYrG,EACnBqG,EAAO,QAAUhB,EACjBgB,EAAO,MAAQA,EAEf,IAAMpG,GAAUoG,EAAO,QACjBoB,GAAapB,EAAO,WACpBqB,GAAMrB,EAAO,IACbiB,GAAajB,EAAO,WACpBsB,GAActB,EAAO,YAE3B,IAAMuB,GAASC,EAAO,MAChBC,GAAQC,EAAM,ICjvFpB,SAASC,EAAKC,KAAYC,EAAQ,CAChC,IAAIC,EAAM,GACV,OAAAF,EAAQ,QAAQ,CAACG,EAAQ,IAAM,CAC7BD,GAAOC,EAASF,EAAO,EACzB,CAAC,EACMC,CACT,CAEe,SAARE,EAAsCC,EAAU,CAAE,SAAAC,CAAS,EAAG,CACnE,GAAM,CAAE,KAAAC,EAAM,QAAAC,CAAQ,EAAIH,EACpBI,EAAWC,EAAO,MAAMH,CAAI,EAC5BI,EAAcH,EAAQ,IAAKI,GAAMF,EAAO,MAAME,CAAC,CAAC,EACtD,OAAOb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAmBHU;AAAA,MACAE,EACC,IACC,CAACE,EAAQC,IAAMf;AAAA;AAAA,0DAEmCe;AAAA;AAAA;AAAA;AAAA;AAAA,6BAK7BA;AAAA;AAAA,gBAEbD;AAAA;AAAA;AAAA,SAIV,EACC,KAAK,EAAE;AAAA,GAEd,CClDA,IAAME,GAAc,SAAS,cAAc,mBAAmB,EAE9D,SAASC,GAAsBC,EAAM,CACnC,IAAMC,EAAW,IAAI,SAASD,CAAI,EAC5BE,EAAOD,EAAS,IAAI,MAAM,EAC1BE,EAAUF,EAAS,OAAO,SAAS,EACzCH,GAAY,UAAYM,EACtB,CAAE,KAAAF,EAAM,QAAAC,CAAQ,EAChB,CAAE,SAAU,EAAK,CACnB,EACA,oBAAoBL,GAAa,CAC/B,WAAY,CACV,CACE,KAAM,KACN,MAAO,KACP,QAAS,EACX,EACA,CACE,KAAM,IACN,MAAO,IACP,QAAS,EACX,CACF,CACF,CAAC,CACH,CAEAC,GAAsB,SAAS,cAAc,MAAM,CAAC,EAEpD,SACG,cAAc,MAAM,EACpB,iBAAiB,QAAUM,GAAMN,GAAsBM,EAAE,OAAO,IAAI,CAAC",
  "names": ["getDefaults", "defaults", "changeDefaults", "newDefaults", "escapeTest", "escapeReplace", "escapeTestNoEncode", "escapeReplaceNoEncode", "escapeReplacements", "getEscapeReplacement", "ch", "escape", "html", "encode", "unescapeTest", "unescape", "_", "caret", "edit", "regex", "opt", "obj", "name", "val", "nonWordAndColonTest", "originIndependentUrl", "cleanUrl", "sanitize", "base", "href", "prot", "resolveUrl", "baseUrls", "justDomain", "protocol", "domain", "rtrim", "relativeBase", "noopTest", "merge", "i", "target", "key", "splitCells", "tableRow", "count", "row", "match", "offset", "str", "escaped", "curr", "cells", "c", "invert", "l", "suffLen", "currChar", "findClosingBracket", "b", "level", "checkSanitizeDeprecation", "repeatString", "pattern", "result", "outputLink", "cap", "link", "raw", "lexer", "title", "text", "token", "indentCodeCompensation", "matchIndentToCode", "indentToCode", "node", "matchIndentInNode", "indentInNode", "Tokenizer", "options", "src", "trimmed", "top", "tokens", "istask", "ischecked", "indent", "blankLine", "endsWithBlankLine", "line", "nextLine", "rawLine", "itemContents", "endEarly", "bull", "isordered", "list", "itemRegex", "nextBulletRegex", "hrRegex", "fencesBeginRegex", "headingBeginRegex", "spacers", "t", "hasMultipleLineBreaks", "tag", "item", "j", "k", "trimmedUrl", "rtrimSlash", "lastParenIndex", "linkLen", "links", "maskedSrc", "prevChar", "nextChar", "lLength", "rDelim", "rLength", "delimTotal", "midDelimTotal", "endReg", "hasNonSpaceChars", "hasSpaceCharsOnBothEnds", "mangle", "prevCapZero", "smartypants", "block", "inline", "out", "Lexer", "rules", "next", "leading", "tabs", "lastToken", "cutSrc", "lastParagraphClipped", "extTokenizer", "startIndex", "tempSrc", "tempStart", "getStartIndex", "errMsg", "keepPrevChar", "Renderer", "code", "infostring", "lang", "quote", "slugger", "id", "body", "ordered", "start", "type", "startatt", "checked", "header", "content", "flags", "TextRenderer", "Slugger", "value", "originalSlug", "isDryRun", "slug", "occurenceAccumulator", "Parser", "l2", "l3", "cell", "loose", "itemBody", "task", "checkbox", "ret", "renderer", "marked", "callback", "highlight", "e", "done", "err", "pending", "onError", "args", "extensions", "pack", "opts", "ext", "prevRenderer", "prop", "tokenizer", "prevTokenizer", "walkTokens", "values", "childTokens", "setOptions", "use", "parseInline", "parser", "Parser", "lexer", "Lexer", "html", "strings", "values", "str", "string", "questionTemplateFunc", "question", "disabled", "body", "choices", "bodyHTML", "marked", "choicesHTML", "c", "choice", "i", "previewNode", "renderPreviewFromForm", "form", "formData", "body", "choices", "questionTemplateFunc", "e"]
}
